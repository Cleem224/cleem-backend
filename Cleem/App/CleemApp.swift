import SwiftUI
import CoreData
import HealthKit
import UIKit

// –£–±–∏—Ä–∞–µ–º @main, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –µ—Å—Ç—å –≤ AppDelegate
struct CleemApp: App {
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–ª–µ–≥–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    @UIApplicationDelegateAdaptor(AppDelegate.self) var appDelegate
    
    @StateObject var navigationCoordinator = NavigationCoordinator.shared
    
    let persistenceController = PersistenceController.shared
    
    @AppStorage("hasCompletedOnboarding") private var hasCompletedOnboarding = false
    // –ö–ª—é—á –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    @AppStorage("appFirstLaunchCompleted") private var appFirstLaunchCompleted = false
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞—Å—Ç–∞–≤–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    @State private var showLaunchScreen = true
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –±–∞–Ω–Ω–µ—Ä–æ–≤
    @State private var showBanner = false
    @State private var bannerData = BannerData(title: "", detail: "", type: .success)
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    @Environment(\.scenePhase) private var scenePhase
    
    // Reference to health manager to ensure it's initialized on app startup
    // Using @ObservedObject to ensure it's kept alive and updated
    @ObservedObject private var healthManager = HealthKitManager.shared
    
    init() {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ use_new_recognition –≤ true –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        UserDefaults.standard.set(true, forKey: "use_new_recognition")
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API –∫–ª—é—á–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CleemApp...")
        FoodRecognitionManagerV2.initializeApiKeys()
    }
    
    var body: some Scene {
        WindowGroup {
            ZStack {
                // –û—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                MainTabView()
                    .environmentObject(navigationCoordinator)
                    .preferredColorScheme(.light)
                    .banner(isPresented: $showBanner, data: bannerData)
                    .onAppear {
                        setupAppearance()
                        setupNotifications()
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–≤—ã–π –ª–∏ —ç—Ç–æ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                        if !appFirstLaunchCompleted {
                            print("–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ HealthKit")
                            // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                            healthManager.resetAuthorizationStatus()
                            // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω
                            appFirstLaunchCompleted = true
                        }
                        
                        // Verify HealthKit authorization on app start
                        print("App started, verifying HealthKit authorization")
                        
                        // Force check authorization status with staggered checks
                        // to ensure proper initialization
                        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                            healthManager.forceCheckAuthorization()
                            
                            // Series of checks to ensure proper state
                            DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                                healthManager.forceCheckAuthorization()
                                
                                DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
                                    healthManager.forceCheckAuthorization()
                                }
                            }
                        }
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
                        let hasCompletedOnboarding = UserDefaults.standard.bool(forKey: "hasCompletedOnboarding")
                        if !hasCompletedOnboarding {
                            DispatchQueue.main.async {
                                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
                                navigationCoordinator.startOnboarding()
                            }
                        }
                    }
                    .onChange(of: healthManager.isAuthorized) { newValue in
                        print("App detected HealthKit authorization change: \(newValue)")
                    }
                    // –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    .onReceive(NotificationCenter.default.publisher(for: UIApplication.willResignActiveNotification)) { _ in
                        // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Ö–æ–¥–∏—Ç –≤ —Ñ–æ–Ω - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        print("App going to background - resetting HealthKit session flag")
                        healthManager.resetSessionUpdateFlag()
                    }
                    .onReceive(NotificationCenter.default.publisher(for: UIApplication.willTerminateNotification)) { _ in
                        // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        print("App terminating - resetting HealthKit session flag")
                        healthManager.resetSessionUpdateFlag()
                    }
                
                // –ó–∞—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ–≤–µ—Ä—Ö –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                if showLaunchScreen {
                    SplashScreenView()
                        .transition(.opacity)
                        .zIndex(1)
                        .onAppear {
                            // –°–∫—Ä—ã—Ç—å –∑–∞—Å—Ç–∞–≤–∫—É —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
                            DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                                withAnimation(.easeOut(duration: 0.3)) {
                                    showLaunchScreen = false
                                }
                            }
                        }
                }
            }
        }
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ü–µ–Ω—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        .onChange(of: scenePhase) { oldPhase, newPhase in
            print("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: \(oldPhase) -> \(newPhase)")
            
            if newPhase == .active && oldPhase != .active {
                print("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞–ª–æ –∞–∫—Ç–∏–≤–Ω—ã–º - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ")
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é UserDefaults
                if UserDefaults.standard.object(forKey: "foodHistory") == nil {
                    print("CleemApp: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è foodHistory –≤ UserDefaults")
                    UserDefaults.standard.set([], forKey: "foodHistory")
                    UserDefaults.standard.synchronize()
                }
                
                // Synchronize food data between CoreData and UserDefaults
                CoreDataManager.shared.synchronizeAllFoodData()
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ foodHistory
                if let foodHistory = UserDefaults.standard.array(forKey: "foodHistory") as? [[String: Any]] {
                    print("CleemApp: –ü—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω–æ \(foodHistory.count) –∑–∞–ø–∏—Å–µ–π –µ–¥—ã –≤ UserDefaults")
                    
                    // –§–∏–ª—å—Ç—Ä—É–µ–º —è–±–ª–æ–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                    var filteredFoodHistory = foodHistory
                    let initialCount = filteredFoodHistory.count
                    
                    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å "apple" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–æ–º
                    let lastScannedFoodID = UserDefaults.standard.string(forKey: "lastScannedFoodID")
                    filteredFoodHistory.removeAll { item in
                        if let name = item["name"] as? String,
                           name.lowercased() == "apple",
                           let id = item["id"] as? String,
                           id != lastScannedFoodID {
                            print("CleemApp: üçé –£–¥–∞–ª—è–µ–º Apple –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –µ–¥—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                            return true
                        }
                        return false
                    }
                    
                    // –ï—Å–ª–∏ –º—ã —É–¥–∞–ª–∏–ª–∏ —è–±–ª–æ–∫–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
                    if initialCount != filteredFoodHistory.count {
                        UserDefaults.standard.set(filteredFoodHistory, forKey: "foodHistory")
                        // –£–¥–∞–ª—è–µ–º lastAppleImage –¥–ª—è –ø–æ–ª–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                        UserDefaults.standard.removeObject(forKey: "lastAppleImage")
                        UserDefaults.standard.synchronize()
                        print("CleemApp: –£–¥–∞–ª–µ–Ω–æ \(initialCount - filteredFoodHistory.count) —è–±–ª–æ–∫ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –µ–¥—ã")
                    }
                } else {
                    print("CleemApp: –ü—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –µ–¥—ã –≤ UserDefaults")
                }
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                NotificationCenter.default.post(name: NSNotification.Name("FoodUpdated"), object: nil)
                print("CleemApp: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ FoodUpdated")
            }
            
            if newPhase == .background || newPhase == .inactive {
                print("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Ö–æ–¥–∏—Ç –≤ —Ñ–æ–Ω –∏–ª–∏ —Å—Ç–∞–ª–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CoreData")
                CoreDataManager.shared.saveContext()
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è UserDefaults
                UserDefaults.standard.synchronize()
                print("CleemApp: UserDefaults —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω")
            }
        }
    }
    
    func setupAppearance() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UIKit —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –Ω–∞—à–µ–π —Ç–µ–º–µ
        UINavigationBar.appearance().backgroundColor = UIColor(Color.appBackgroundPeach)
        UINavigationBar.appearance().tintColor = UIColor(Color.appPrimary)
        UITabBar.appearance().backgroundColor = UIColor(Color.appSecondaryBackground)
    }
    
    func setupNotifications() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–æ–≤
        NotificationCenter.default.addObserver(forName: Notification.Name("ShowBanner"), object: nil, queue: .main) { notification in
            if let bannerData = notification.object as? BannerData {
                self.bannerData = bannerData
                withAnimation {
                    self.showBanner = true
                }
            }
        }
    }
}

// Splash —ç–∫—Ä–∞–Ω –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
struct SplashScreenView: View {
    var body: some View {
        ZStack {
            // –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π —Ñ–æ–Ω, —Ç–∞–∫–æ–π –∂–µ –∫–∞–∫ –Ω–∞ —ç–∫—Ä–∞–Ω–∞—Ö onboarding
            Color(red: 0.91, green: 0.97, blue: 1.0)
                .edgesIgnoringSafeArea(.all)
            
            // –õ–æ–≥–æ—Ç–∏–ø –∏ —Ç–µ–∫—Å—Ç Cleem –≤ —Ü–µ–Ω—Ç—Ä–µ —ç–∫—Ä–∞–Ω–∞ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ)
            HStack(spacing: 2) {
                // –õ–æ–≥–æ—Ç–∏–ø –±—Ä–æ–∫–∫–æ–ª–∏ (–∏–∫–æ–Ω–∫–∞ –∏–∑ Assets)
                Image("BroccoliFace")
                    .resizable()
                    .scaledToFit()
                    .frame(width: 100, height: 100)
                
                // –ù–∞–¥–ø–∏—Å—å Cleem
                Text("Cleem")
                    .font(.system(size: 44, weight: .bold))
                    .foregroundColor(.black)
                    .padding(.leading, -5) // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–±–ª–∏–∂–∞–µ–º —Ç–µ–∫—Å—Ç –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            }
        }
    }
}

// –í—Å–µ —Ü–≤–µ—Ç–∞ —Ç–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ Color+Extensions.swift
extension Color {
    // –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω (–∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ)
    static let appBackgroundPeach = Color(red: 0.94, green: 0.63, blue: 0.56)
    
    // –û—Å–Ω–æ–≤–Ω–æ–π —Å–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π —Ñ–æ–Ω (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
    static let appBackground = Color(red: 0.82, green: 0.93, blue: 0.99)
    
    // –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–ø–µ—Ä—Å–∏–∫–æ–≤—ã–π)
    static let appWelcomeBackground = Color(red: 1.0, green: 0.74, blue: 0.57)
    
    // –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –¥–ª—è –≥–æ–ª—É–±–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    static let appBlueBackground = Color(red: 0.85, green: 0.95, blue: 1.0)
    
    // –¶–≤–µ—Ç –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    static let appButtonBackground = Color(red: 0.9, green: 0.9, blue: 0.9)
    
    // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç –∞–∫—Ü–µ–Ω—Ç–∞
    static let appPrimary = Color(red: 0.23, green: 0.21, blue: 0.38)
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ü–≤–µ—Ç –∞–∫—Ü–µ–Ω—Ç–∞
    static let appSecondary = Color(red: 0.6, green: 0.41, blue: 0.51)
    
    // –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ñ–æ–Ω–µ
    static let appText = Color(red: 0.27, green: 0.27, blue: 0.27)
    
    // –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    static let appSecondaryBackground = Color.white
    
    // –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
    static let appTextOnElements = Color(red: 0.2, green: 0.2, blue: 0.2)
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    static let appAccent = Color(red: 0.85, green: 0.57, blue: 0.5)
}


