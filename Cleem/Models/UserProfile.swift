import Foundation
import SwiftUI
import Cleem
import Combine

class UserProfile: ObservableObject, Codable {
    // Shared instance
    static let shared = UserProfile()
    
    // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    @Published var name: String = ""
    @Published var dateOfBirth: Date? = nil
    @Published var age: Int = 30
    @Published var gender: Gender = .male
    
    // –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    @Published var heightInCm: Int = 170
    @Published var weightInKg: Double = 70.0
    @Published var targetWeightInKg: Double = 65.0
    
    // –¶–µ–ª–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    @Published var goal: Goal = .loseWeight
    @Published var fitnessGoal: FitnessGoal = .loseWeight // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
    @Published var activityLevel: ActivityLevel = .sedentary
    @Published var diet: Diet = .none
    @Published var preferredLanguage: Language? = .english
    @Published var dailyStepsTarget: Int = 10000
    
    // –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    @Published var bmi: Double = 0.0
    @Published var dailyCalories: Double = 2000.0
    @Published var proteinInGrams: Double = 120.0
    @Published var carbsInGrams: Double = 200.0
    @Published var fatsInGrams: Double = 65.0
    
    // –°–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    @Published var dailyCalorieTarget: Int = 2000
    @Published var proteinGramsTarget: Int = 125
    @Published var carbsGramsTarget: Int = 225
    @Published var fatGramsTarget: Int = 65
    
    // –°–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è (–¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–∫—Ä—É–≥–æ–≤)
    @Published var consumedCalories: Double = 0.0
    @Published var consumedProtein: Double = 0.0
    @Published var consumedCarbs: Double = 0.0
    @Published var consumedFat: Double = 0.0
    
    // –§–ª–∞–≥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ—Å—á–µ—Ç–æ–º –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
    @Published var autoCalculateNutrients: Bool = true
    
    // –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    enum Gender: String, Codable, CaseIterable {
        case male = "Male"
        case female = "Female"
        case other = "Other"
    }
    
    enum Goal: String, Codable, CaseIterable {
        case loseWeight = "Lose Weight"
        case maintainWeight = "Maintain Weight"
        case gainMuscle = "Gain Muscle"
    }
    
    // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
    enum FitnessGoal: String, Codable, CaseIterable {
        case loseWeight = "Lose Weight"
        case maintain = "Maintain Weight"
        case gainMuscle = "Gain Muscle"
        
        var calorieAdjustment: Double {
            switch self {
            case .loseWeight: return 0.8  // 20% deficit
            case .maintain: return 1.0    // Maintain
            case .gainMuscle: return 1.15 // 15% surplus
            }
        }
    }
    
    enum ActivityLevel: String, Codable, CaseIterable {
        case sedentary = "Sedentary"
        case lightlyActive = "Lightly Active"
        case moderatelyActive = "Moderately Active"
        case active = "Active"
        case veryActive = "Very Active"
        
        // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
        static var light: ActivityLevel { return .lightlyActive }
        static var moderate: ActivityLevel { return .moderatelyActive }
        static var extraActive: ActivityLevel { return .veryActive }
        
        var activityMultiplier: Double {
            switch self {
            case .sedentary: return 1.2
            case .lightlyActive: return 1.375
            case .moderatelyActive: return 1.55
            case .active: return 1.725
            case .veryActive: return 1.9
            }
        }
    }
    
    enum Diet: String, Codable, CaseIterable {
        case none = "No specific diet"
        case keto = "Keto"
        case mediterranean = "Mediterranean"
        case intermittentFasting = "Intermittent Fasting"
        case dukan = "Dukan"
    }
    
    enum Language: String, Codable, CaseIterable {
        case english = "English"
        case russian = "Russian"
        case spanish = "Spanish"
        case french = "Fran√ßais"
        case chinese = "‰∏≠Êñá"
        case german = "Deutsch"
        
        var flag: String {
            switch self {
            case .english: return "üá∫üá∏"
            case .russian: return "üá∑üá∫"
            case .spanish: return "üá™üá∏"
            case .french: return "üá´üá∑"
            case .chinese: return "üá®üá≥"
            case .german: return "üá©üá™"
            }
        }
        
        var code: String {
            switch self {
            case .english: return "EN"
            case .russian: return "RU"
            case .spanish: return "ES"
            case .french: return "FR"
            case .chinese: return "CH"
            case .german: return "DE"
            }
        }
    }
    
    // CodingKeys –¥–ª—è Codable
    enum CodingKeys: String, CodingKey {
        case name, dateOfBirth, age, gender, heightInCm, weightInKg, targetWeightInKg
        case goal, fitnessGoal, activityLevel, diet, preferredLanguage
        case bmi, dailyCalories, proteinInGrams, carbsInGrams, fatsInGrams
        case dailyCalorieTarget, proteinGramsTarget, carbsGramsTarget, fatGramsTarget
        case consumedCalories, consumedProtein, consumedCarbs, consumedFat
        case autoCalculateNutrients
        case dailyStepsTarget
    }
    
    // MARK: - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
    
    init() {
        calculateDailyTargets()
    }
    
    // MARK: - Codable
    
    required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        name = try container.decodeIfPresent(String.self, forKey: .name) ?? ""
        dateOfBirth = try container.decodeIfPresent(Date.self, forKey: .dateOfBirth)
        age = try container.decodeIfPresent(Int.self, forKey: .age) ?? 30
        gender = try container.decodeIfPresent(Gender.self, forKey: .gender) ?? .male
        
        heightInCm = try container.decodeIfPresent(Int.self, forKey: .heightInCm) ?? 170
        weightInKg = try container.decodeIfPresent(Double.self, forKey: .weightInKg) ?? 70.0
        targetWeightInKg = try container.decodeIfPresent(Double.self, forKey: .targetWeightInKg) ?? 65.0
        
        goal = try container.decodeIfPresent(Goal.self, forKey: .goal) ?? .loseWeight
        fitnessGoal = try container.decodeIfPresent(FitnessGoal.self, forKey: .fitnessGoal) ?? .loseWeight
        activityLevel = try container.decodeIfPresent(ActivityLevel.self, forKey: .activityLevel) ?? .sedentary
        diet = try container.decodeIfPresent(Diet.self, forKey: .diet) ?? .none
        preferredLanguage = try container.decodeIfPresent(Language?.self, forKey: .preferredLanguage) ?? .english
        
        bmi = try container.decodeIfPresent(Double.self, forKey: .bmi) ?? 0.0
        dailyCalories = try container.decodeIfPresent(Double.self, forKey: .dailyCalories) ?? 2000.0
        proteinInGrams = try container.decodeIfPresent(Double.self, forKey: .proteinInGrams) ?? 120.0
        carbsInGrams = try container.decodeIfPresent(Double.self, forKey: .carbsInGrams) ?? 200.0
        fatsInGrams = try container.decodeIfPresent(Double.self, forKey: .fatsInGrams) ?? 65.0
        
        dailyCalorieTarget = try container.decodeIfPresent(Int.self, forKey: .dailyCalorieTarget) ?? 2000
        proteinGramsTarget = try container.decodeIfPresent(Int.self, forKey: .proteinGramsTarget) ?? 125
        carbsGramsTarget = try container.decodeIfPresent(Int.self, forKey: .carbsGramsTarget) ?? 225
        fatGramsTarget = try container.decodeIfPresent(Int.self, forKey: .fatGramsTarget) ?? 65
        
        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
        consumedCalories = try container.decodeIfPresent(Double.self, forKey: .consumedCalories) ?? 0.0
        consumedProtein = try container.decodeIfPresent(Double.self, forKey: .consumedProtein) ?? 0.0
        consumedCarbs = try container.decodeIfPresent(Double.self, forKey: .consumedCarbs) ?? 0.0
        consumedFat = try container.decodeIfPresent(Double.self, forKey: .consumedFat) ?? 0.0
        
        autoCalculateNutrients = try container.decodeIfPresent(Bool.self, forKey: .autoCalculateNutrients) ?? true
        
        dailyStepsTarget = try container.decodeIfPresent(Int.self, forKey: .dailyStepsTarget) ?? 10000
    }
    
    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(name, forKey: .name)
        try container.encode(dateOfBirth, forKey: .dateOfBirth)
        try container.encode(age, forKey: .age)
        try container.encode(gender, forKey: .gender)
        
        try container.encode(heightInCm, forKey: .heightInCm)
        try container.encode(weightInKg, forKey: .weightInKg)
        try container.encode(targetWeightInKg, forKey: .targetWeightInKg)
        
        try container.encode(goal, forKey: .goal)
        try container.encode(fitnessGoal, forKey: .fitnessGoal)
        try container.encode(activityLevel, forKey: .activityLevel)
        try container.encode(diet, forKey: .diet)
        try container.encode(preferredLanguage, forKey: .preferredLanguage)
        
        try container.encode(bmi, forKey: .bmi)
        try container.encode(dailyCalories, forKey: .dailyCalories)
        try container.encode(proteinInGrams, forKey: .proteinInGrams)
        try container.encode(carbsInGrams, forKey: .carbsInGrams)
        try container.encode(fatsInGrams, forKey: .fatsInGrams)
        
        try container.encode(dailyCalorieTarget, forKey: .dailyCalorieTarget)
        try container.encode(proteinGramsTarget, forKey: .proteinGramsTarget)
        try container.encode(carbsGramsTarget, forKey: .carbsGramsTarget)
        try container.encode(fatGramsTarget, forKey: .fatGramsTarget)
        
        // –ö–æ–¥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
        try container.encode(consumedCalories, forKey: .consumedCalories)
        try container.encode(consumedProtein, forKey: .consumedProtein)
        try container.encode(consumedCarbs, forKey: .consumedCarbs)
        try container.encode(consumedFat, forKey: .consumedFat)
        
        try container.encode(autoCalculateNutrients, forKey: .autoCalculateNutrients)
        
        try container.encode(dailyStepsTarget, forKey: .dailyStepsTarget)
    }
    
    // MARK: - –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    func updateProfile() {
        // –ù–µ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        // calculateDailyTargets()
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        dailyCalorieTarget = Int(dailyCalories)
        proteinGramsTarget = Int(proteinInGrams)
        carbsGramsTarget = Int(carbsInGrams)
        fatGramsTarget = Int(fatsInGrams)
        
        saveProfile()
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    private func saveProfile() {
        do {
            let data = try JSONEncoder().encode(self)
            UserDefaults.standard.set(data, forKey: "userProfile")
        } catch {
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: \(error.localizedDescription)")
        }
    }
    
    // –†–∞—Å—á–µ—Ç BMI
    func calculateBMI() -> Double {
        let heightInMeters = Double(heightInCm) / 100.0
        let bmi = weightInKg / (heightInMeters * heightInMeters)
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 1 –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
        self.bmi = round(bmi * 10) / 10
        return self.bmi
    }
    
    // –†–∞—Å—á–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π
    func calculateDailyCalories() -> Double {
        // –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ –æ–±–º–µ–Ω–∞ –≤–µ—â–µ—Å—Ç–≤ (BMR) –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞
        let s = gender == .male ? 5 : -161
        let bmr = 10 * weightInKg + 6.25 * Double(heightInCm) - 5 * Double(age) + Double(s)
        
        // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        let activityMultiplier = self.activityLevel.activityMultiplier
        
        // –†–∞—Å—á–µ—Ç –æ–±—â–µ–π –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –∫–∞–ª–æ—Ä–∏—è—Ö —Å —É—á–µ—Ç–æ–º —Ü–µ–ª–µ–π
        var tdee = bmr * activityMultiplier
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞–ª–æ—Ä–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
        switch goal {
        case .loseWeight:
            tdee *= 0.8 // –î–µ—Ñ–∏—Ü–∏—Ç 20%
        case .maintainWeight:
            // –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            break
        case .gainMuscle:
            tdee *= 1.1 // –ü—Ä–æ—Ñ–∏—Ü–∏—Ç 10%
        }
        
        // –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–∏—Ö 50 –∫–∞–ª–æ—Ä–∏–π
        self.dailyCalories = round(tdee / 50) * 50
        return self.dailyCalories
    }
    
    // –†–∞—Å—á–µ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –±–µ–ª–∫–∞
    func calculateProteinTarget() -> Double {
        // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏ –∏ –¥–∏–µ—Ç—ã
        var proteinPercentage: Double = 0.3 // 30% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–∏–µ—Ç
        switch diet {
        case .keto:
            proteinPercentage = 0.25 // 25%
        case .mediterranean:
            proteinPercentage = 0.20 // 20%
        case .intermittentFasting, .dukan, .none:
            // –û—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
            switch goal {
            case .loseWeight:
                proteinPercentage = 0.35
            case .maintainWeight:
                // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                break
            case .gainMuscle:
                proteinPercentage = 0.35
            }
        }
        
        // –†–∞—Å—á–µ—Ç –≥—Ä–∞–º–º–æ–≤ –±–µ–ª–∫–∞
        let caloriesFromProtein = dailyCalories * proteinPercentage
        // 1 –≥ –±–µ–ª–∫–∞ = 4 –∫–∞–ª–æ—Ä–∏–∏
        proteinInGrams = round(caloriesFromProtein / 4)
        return proteinInGrams
    }
    
    // –†–∞—Å—á–µ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —É–≥–ª–µ–≤–æ–¥–æ–≤
    func calculateCarbsTarget() -> Double {
        // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏ –∏ –¥–∏–µ—Ç—ã
        var carbsPercentage: Double = 0.45 // 45% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–∏–µ—Ç
        switch diet {
        case .keto:
            carbsPercentage = 0.05 // 5%
        case .mediterranean:
            carbsPercentage = 0.50 // 50%
        case .intermittentFasting, .dukan, .none:
            // –û—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
            switch goal {
            case .loseWeight:
                carbsPercentage = 0.40
            case .maintainWeight:
                // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                break
            case .gainMuscle:
                carbsPercentage = 0.45
            }
        }
        
        // –†–∞—Å—á–µ—Ç –≥—Ä–∞–º–º–æ–≤ —É–≥–ª–µ–≤–æ–¥–æ–≤
        let caloriesFromCarbs = dailyCalories * carbsPercentage
        // 1 –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤ = 4 –∫–∞–ª–æ—Ä–∏–∏
        carbsInGrams = round(caloriesFromCarbs / 4)
        return carbsInGrams
    }
    
    // –†–∞—Å—á–µ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∂–∏—Ä–æ–≤
    func calculateFatsTarget() -> Double {
        // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏ –∏ –¥–∏–µ—Ç—ã
        var fatsPercentage: Double = 0.25 // 25% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–∏–µ—Ç
        switch diet {
        case .keto:
            fatsPercentage = 0.7 // 70%
        case .mediterranean:
            fatsPercentage = 0.30 // 30%
        case .intermittentFasting, .dukan, .none:
            // –û—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
            switch goal {
            case .loseWeight:
                fatsPercentage = 0.25
            case .maintainWeight:
                // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                break
            case .gainMuscle:
                fatsPercentage = 0.20
            }
        }
        
        // –†–∞—Å—á–µ—Ç –≥—Ä–∞–º–º–æ–≤ –∂–∏—Ä–æ–≤
        let caloriesFromFats = dailyCalories * fatsPercentage
        // 1 –≥ –∂–∏—Ä–æ–≤ = 9 –∫–∞–ª–æ—Ä–∏–π
        fatsInGrams = round(caloriesFromFats / 9)
        return fatsInGrams
    }
    
    // –†–∞—Å—á–µ—Ç –º–∞–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç–æ–≤
    func calculateDailyTargets() {
        // –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º BMI –∏ –¥–Ω–µ–≤–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏
        _ = calculateBMI()
        _ = calculateDailyCalories()
        
        // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏ –∏ –¥–∏–µ—Ç—ã
        var proteinPercentage: Double = 0.3 // 30% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        var carbsPercentage: Double = 0.45 // 45% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        var fatsPercentage: Double = 0.25 // 25% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–∏–µ—Ç
        switch diet {
        case .keto:
            proteinPercentage = 0.25 // 25%
            carbsPercentage = 0.05 // 5%
            fatsPercentage = 0.7 // 70%
        case .mediterranean:
            proteinPercentage = 0.20 // 20%
            carbsPercentage = 0.50 // 50%
            fatsPercentage = 0.30 // 30%
        case .intermittentFasting, .dukan, .none:
            // –û—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
            switch goal {
            case .loseWeight:
                proteinPercentage = 0.35
                carbsPercentage = 0.40
                fatsPercentage = 0.25
            case .maintainWeight:
                // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                break
            case .gainMuscle:
                proteinPercentage = 0.35
                carbsPercentage = 0.45
                fatsPercentage = 0.20
            }
        }
        
        // –†–∞—Å—á–µ—Ç –≥—Ä–∞–º–º–æ–≤ –º–∞–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç–æ–≤
        let caloriesFromProtein = dailyCalories * proteinPercentage
        let caloriesFromCarbs = dailyCalories * carbsPercentage
        let caloriesFromFats = dailyCalories * fatsPercentage
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ –∫–∞–ª–æ—Ä–∏–π –≤ –≥—Ä–∞–º–º—ã
        // 1 –≥ –±–µ–ª–∫–∞ = 4 –∫–∞–ª–æ—Ä–∏–∏, 1 –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤ = 4 –∫–∞–ª–æ—Ä–∏–∏, 1 –≥ –∂–∏—Ä–æ–≤ = 9 –∫–∞–ª–æ—Ä–∏–π
        proteinInGrams = round(caloriesFromProtein / 4)
        carbsInGrams = round(caloriesFromCarbs / 4)
        fatsInGrams = round(caloriesFromFats / 9)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        dailyCalorieTarget = Int(dailyCalories)
        proteinGramsTarget = Int(proteinInGrams)
        carbsGramsTarget = Int(carbsInGrams)
        fatGramsTarget = Int(fatsInGrams)
    }
    
    // –ü–µ—Ä–µ—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–µ–ª–∫–∞
    func recalculateFromProtein(newProtein: Double) {
        // –ï—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–ª–∫–∞
        if !autoCalculateNutrients {
            proteinInGrams = newProtein
            proteinGramsTarget = Int(proteinInGrams)
            saveProfile()
            return
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–ª–∫–∞
        proteinInGrams = newProtein
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –æ—Ç –ø—Ä–æ—Ç–µ–∏–Ω–∞ (1–≥ = 4 –∫–∞–ª–æ—Ä–∏–∏)
        let proteinCalories = newProtein * 4
        
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–µ –∫–∞–ª–æ—Ä–∏–∏ —Ä–∞–≤–Ω—ã 0, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
        if dailyCalories <= 0 {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ç–µ–∏–Ω–∞ (–ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ –ø—Ä–æ—Ç–µ–∏–Ω —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 30%)
            dailyCalories = proteinCalories / 0.3
            
            // –í—ã–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤
            recalculateNutrientsFromCalories(newCalories: dailyCalories)
            return
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        let currentProteinRatio = (proteinInGrams * 4) / dailyCalories
        let currentCarbsRatio = (carbsInGrams * 4) / dailyCalories
        let currentFatsRatio = (fatsInGrams * 9) / dailyCalories
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–∫–æ–ª–æ 1)
        let totalRatio = currentProteinRatio + currentCarbsRatio + currentFatsRatio
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å—É–º–º–∞ –±—ã–ª–∞ —Ä–∞–≤–Ω–∞ 1
        let adjustedCarbsRatio = currentCarbsRatio / (totalRatio - currentProteinRatio) * (1 - proteinCalories / dailyCalories)
        let adjustedFatsRatio = currentFatsRatio / (totalRatio - currentProteinRatio) * (1 - proteinCalories / dailyCalories)
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –æ—Ç —É–≥–ª–µ–≤–æ–¥–æ–≤ –∏ –∂–∏—Ä–æ–≤
        let carbsCalories = dailyCalories * adjustedCarbsRatio
        let fatsCalories = dailyCalories * adjustedFatsRatio
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–ª–æ—Ä–∏–∏ –≤ –≥—Ä–∞–º–º—ã
        carbsInGrams = round(carbsCalories / 4)
        fatsInGrams = round(fatsCalories / 9)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        dailyCalorieTarget = Int(dailyCalories)
        proteinGramsTarget = Int(proteinInGrams)
        carbsGramsTarget = Int(carbsInGrams)
        fatGramsTarget = Int(fatsInGrams)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ
        saveProfile()
    }
    
    // –ü–µ—Ä–µ—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É–≥–ª–µ–≤–æ–¥–æ–≤
    func recalculateFromCarbs(newCarbs: Double) {
        // –ï—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —É–≥–ª–µ–≤–æ–¥–æ–≤
        if !autoCalculateNutrients {
            carbsInGrams = newCarbs
            carbsGramsTarget = Int(carbsInGrams)
            saveProfile()
            return
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É–≥–ª–µ–≤–æ–¥–æ–≤
        carbsInGrams = newCarbs
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –æ—Ç —É–≥–ª–µ–≤–æ–¥–æ–≤ (1–≥ = 4 –∫–∞–ª–æ—Ä–∏–∏)
        let carbsCalories = newCarbs * 4
        
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–µ –∫–∞–ª–æ—Ä–∏–∏ —Ä–∞–≤–Ω—ã 0, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
        if dailyCalories <= 0 {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≥–ª–µ–≤–æ–¥–æ–≤ (–ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ —É–≥–ª–µ–≤–æ–¥—ã —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç 45%)
            dailyCalories = carbsCalories / 0.45
            
            // –í—ã–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–µ–ª–∫–æ–≤ –∏ –∂–∏—Ä–æ–≤
            recalculateNutrientsFromCalories(newCalories: dailyCalories)
            return
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        let currentProteinRatio = (proteinInGrams * 4) / dailyCalories
        let currentCarbsRatio = (carbsInGrams * 4) / dailyCalories
        let currentFatsRatio = (fatsInGrams * 9) / dailyCalories
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–∫–æ–ª–æ 1)
        let totalRatio = currentProteinRatio + currentCarbsRatio + currentFatsRatio
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å—É–º–º–∞ –±—ã–ª–∞ —Ä–∞–≤–Ω–∞ 1
        let adjustedProteinRatio = currentProteinRatio / (totalRatio - currentCarbsRatio) * (1 - carbsCalories / dailyCalories)
        let adjustedFatsRatio = currentFatsRatio / (totalRatio - currentCarbsRatio) * (1 - carbsCalories / dailyCalories)
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –æ—Ç –±–µ–ª–∫–æ–≤ –∏ –∂–∏—Ä–æ–≤
        let proteinCalories = dailyCalories * adjustedProteinRatio
        let fatsCalories = dailyCalories * adjustedFatsRatio
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–ª–æ—Ä–∏–∏ –≤ –≥—Ä–∞–º–º—ã
        proteinInGrams = round(proteinCalories / 4)
        fatsInGrams = round(fatsCalories / 9)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        dailyCalorieTarget = Int(dailyCalories)
        proteinGramsTarget = Int(proteinInGrams)
        carbsGramsTarget = Int(carbsInGrams)
        fatGramsTarget = Int(fatsInGrams)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ
        saveProfile()
    }
    
    // –ü–µ—Ä–µ—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∂–∏—Ä–æ–≤
    func recalculateFromFats(newFats: Double) {
        // –ï—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∂–∏—Ä–æ–≤
        if !autoCalculateNutrients {
            fatsInGrams = newFats
            fatGramsTarget = Int(fatsInGrams)
            saveProfile()
            return
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∂–∏—Ä–æ–≤
        fatsInGrams = newFats
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –æ—Ç –∂–∏—Ä–æ–≤ (1–≥ = 9 –∫–∞–ª–æ—Ä–∏–π)
        let fatsCalories = newFats * 9
        
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–µ –∫–∞–ª–æ—Ä–∏–∏ —Ä–∞–≤–Ω—ã 0, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
        if dailyCalories <= 0 {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∂–∏—Ä–æ–≤ (–ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ –∂–∏—Ä—ã —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç 25%)
            dailyCalories = fatsCalories / 0.25
            
            // –í—ã–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–µ–ª–∫–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤
            recalculateNutrientsFromCalories(newCalories: dailyCalories)
            return
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        let currentProteinRatio = (proteinInGrams * 4) / dailyCalories
        let currentCarbsRatio = (carbsInGrams * 4) / dailyCalories
        let currentFatsRatio = (fatsInGrams * 9) / dailyCalories
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–∫–æ–ª–æ 1)
        let totalRatio = currentProteinRatio + currentCarbsRatio + currentFatsRatio
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å—É–º–º–∞ –±—ã–ª–∞ —Ä–∞–≤–Ω–∞ 1
        let adjustedProteinRatio = currentProteinRatio / (totalRatio - currentFatsRatio) * (1 - fatsCalories / dailyCalories)
        let adjustedCarbsRatio = currentCarbsRatio / (totalRatio - currentFatsRatio) * (1 - fatsCalories / dailyCalories)
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –æ—Ç –±–µ–ª–∫–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤
        let proteinCalories = dailyCalories * adjustedProteinRatio
        let carbsCalories = dailyCalories * adjustedCarbsRatio
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–ª–æ—Ä–∏–∏ –≤ –≥—Ä–∞–º–º—ã
        proteinInGrams = round(proteinCalories / 4)
        carbsInGrams = round(carbsCalories / 4)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        dailyCalorieTarget = Int(dailyCalories)
        proteinGramsTarget = Int(proteinInGrams)
        carbsGramsTarget = Int(carbsInGrams)
        fatGramsTarget = Int(fatsInGrams)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ
        saveProfile()
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π
    func recalculateNutrientsFromCalories(newCalories: Double) {
        // –ï—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π
        if !autoCalculateNutrients {
            dailyCalories = newCalories
            dailyCalorieTarget = Int(dailyCalories)
            saveProfile()
            return
        }
        
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–µ –∫–∞–ª–æ—Ä–∏–∏ —Ä–∞–≤–Ω—ã 0, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        if dailyCalories <= 0 {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π
            dailyCalories = newCalories
            
            // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏ –∏ –¥–∏–µ—Ç—ã
            var proteinPercentage: Double = 0.3 // 30% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            var carbsPercentage: Double = 0.45 // 45% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            var fatsPercentage: Double = 0.25 // 25% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–∏–µ—Ç
            switch diet {
            case .keto:
                proteinPercentage = 0.25 // 25%
                carbsPercentage = 0.05 // 5%
                fatsPercentage = 0.7 // 70%
            case .mediterranean:
                proteinPercentage = 0.20 // 20%
                carbsPercentage = 0.50 // 50%
                fatsPercentage = 0.30 // 30%
            case .intermittentFasting, .dukan, .none:
                // –û—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
                switch goal {
                case .loseWeight:
                    proteinPercentage = 0.35
                    carbsPercentage = 0.40
                    fatsPercentage = 0.25
                case .maintainWeight:
                    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                    break
                case .gainMuscle:
                    proteinPercentage = 0.35
                    carbsPercentage = 0.45
                    fatsPercentage = 0.20
                }
            }
            
            // –†–∞—Å—á–µ—Ç –≥—Ä–∞–º–º–æ–≤ –º–∞–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤—ã—Ö –∫–∞–ª–æ—Ä–∏–π
            let caloriesFromProtein = dailyCalories * proteinPercentage
            let caloriesFromCarbs = dailyCalories * carbsPercentage
            let caloriesFromFats = dailyCalories * fatsPercentage
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ –∫–∞–ª–æ—Ä–∏–π –≤ –≥—Ä–∞–º–º—ã
            proteinInGrams = round(caloriesFromProtein / 4)
            carbsInGrams = round(caloriesFromCarbs / 4)
            fatsInGrams = round(caloriesFromFats / 9)
        } else {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞–ª–æ—Ä–∏–π
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
            let proteinPercentage = (proteinInGrams * 4) / dailyCalories
            let carbsPercentage = (carbsInGrams * 4) / dailyCalories
            let fatsPercentage = (fatsInGrams * 9) / dailyCalories
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π
            dailyCalories = newCalories
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ –∂–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –∫ –Ω–æ–≤—ã–º –∫–∞–ª–æ—Ä–∏—è–º
            let newProteinCalories = dailyCalories * proteinPercentage
            let newCarbsCalories = dailyCalories * carbsPercentage
            let newFatsCalories = dailyCalories * fatsPercentage
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥—Ä–∞–º–º—ã
            proteinInGrams = round(newProteinCalories / 4)
            carbsInGrams = round(newCarbsCalories / 4)
            fatsInGrams = round(newFatsCalories / 9)
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        dailyCalorieTarget = Int(dailyCalories)
        proteinGramsTarget = Int(proteinInGrams)
        carbsGramsTarget = Int(carbsInGrams)
        fatGramsTarget = Int(fatsInGrams)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ
        saveProfile()
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —É—á–µ—Ç–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω–æ–π –ø–∏—â–∏
    func addConsumedFood(calories: Double, protein: Double, carbs: Double, fat: Double) {
        self.consumedCalories += calories
        self.consumedProtein += protein
        self.consumedCarbs += carbs
        self.consumedFat += fat
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        saveProfile()
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        NotificationCenter.default.post(
            name: .nutritionValuesUpdated,
            object: nil,
            userInfo: nil
        )
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ –¥–Ω—è)
    func resetConsumedValues() {
        self.consumedCalories = 0.0
        self.consumedProtein = 0.0
        self.consumedCarbs = 0.0
        self.consumedFat = 0.0
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        saveProfile()
    }
    
    // MARK: - –ú–µ—Ç–æ–¥—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–±—Ä–æ—Å–∞
    
    /// –°–æ–∑–¥–∞–µ—Ç –∫–æ–ø–∏—é –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    func copy() -> UserProfile {
        let copy = UserProfile()
        
        // –ö–æ–ø–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        copy.name = self.name
        copy.dateOfBirth = self.dateOfBirth
        copy.age = self.age
        copy.gender = self.gender
        
        // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        copy.heightInCm = self.heightInCm
        copy.weightInKg = self.weightInKg
        copy.targetWeightInKg = self.targetWeightInKg
        
        // –ö–æ–ø–∏—Ä—É–µ–º —Ü–µ–ª–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        copy.goal = self.goal
        copy.fitnessGoal = self.fitnessGoal
        copy.activityLevel = self.activityLevel
        copy.diet = self.diet
        copy.preferredLanguage = self.preferredLanguage
        copy.dailyStepsTarget = self.dailyStepsTarget
        
        // –ö–æ–ø–∏—Ä—É–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        copy.bmi = self.bmi
        copy.dailyCalories = self.dailyCalories
        copy.proteinInGrams = self.proteinInGrams
        copy.carbsInGrams = self.carbsInGrams
        copy.fatsInGrams = self.fatsInGrams
        
        // –ö–æ–ø–∏—Ä—É–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        copy.dailyCalorieTarget = self.dailyCalorieTarget
        copy.proteinGramsTarget = self.proteinGramsTarget
        copy.carbsGramsTarget = self.carbsGramsTarget
        copy.fatGramsTarget = self.fatGramsTarget
        
        // –ö–æ–ø–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
        copy.consumedCalories = self.consumedCalories
        copy.consumedProtein = self.consumedProtein
        copy.consumedCarbs = self.consumedCarbs
        copy.consumedFat = self.consumedFat
        
        copy.autoCalculateNutrients = self.autoCalculateNutrients
        
        return copy
    }
    
    // MARK: - –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω—ã—Ö –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
    func addConsumedNutrients(calories: Double, protein: Double, carbs: Double, fat: Double) {
        consumedCalories += calories
        consumedProtein += protein
        consumedCarbs += carbs
        consumedFat += fat
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        saveProfile()
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–¥—ã –∏ —É—á–µ—Ç –µ—ë –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏
    func addFoodConsumption(calories: Double, protein: Double, carbs: Double, fat: Double, name: String) {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω—ã–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã
        consumedCalories += calories
        consumedProtein += protein
        consumedCarbs += carbs
        consumedFat += fat
        
        print("–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ \(name): –∫–∞–ª–æ—Ä–∏–∏ \(calories), –±–µ–ª–∫–∏ \(protein), —É–≥–ª–µ–≤–æ–¥—ã \(carbs), –∂–∏—Ä—ã \(fat)")
        print("–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: –∫–∞–ª–æ—Ä–∏–∏ \(consumedCalories), –±–µ–ª–∫–∏ \(consumedProtein), —É–≥–ª–µ–≤–æ–¥—ã \(consumedCarbs), –∂–∏—Ä—ã \(consumedFat)")
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        saveProfile()
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –ø–∏—Ç–∞–Ω–∏—è
        NotificationCenter.default.post(
            name: .nutritionValuesUpdated,
            object: nil,
            userInfo: nil
        )
    }
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –µ–¥—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏
    func removeFoodConsumption(calories: Double, protein: Double, carbs: Double, fat: Double, name: String) {
        // –í—ã—á–∏—Ç–∞–µ–º –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã —É–¥–∞–ª–µ–Ω–Ω–æ–π –µ–¥—ã
        consumedCalories -= calories
        consumedProtein -= protein
        consumedCarbs -= carbs
        consumedFat -= fat
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ —Å—Ç–∞–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏
        consumedCalories = max(0, consumedCalories)
        consumedProtein = max(0, consumedProtein)
        consumedCarbs = max(0, consumedCarbs)
        consumedFat = max(0, consumedFat)
        
        print("–£–¥–∞–ª–µ–Ω–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ \(name): –∫–∞–ª–æ—Ä–∏–∏ \(calories), –±–µ–ª–∫–∏ \(protein), —É–≥–ª–µ–≤–æ–¥—ã \(carbs), –∂–∏—Ä—ã \(fat)")
        print("–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: –∫–∞–ª–æ—Ä–∏–∏ \(consumedCalories), –±–µ–ª–∫–∏ \(consumedProtein), —É–≥–ª–µ–≤–æ–¥—ã \(consumedCarbs), –∂–∏—Ä—ã \(consumedFat)")
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        saveProfile()
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –ø–∏—Ç–∞–Ω–∏—è
        NotificationCenter.default.post(
            name: .nutritionValuesUpdated,
            object: nil,
            userInfo: nil
        )
    }
}



