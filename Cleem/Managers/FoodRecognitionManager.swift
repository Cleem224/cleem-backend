import Foundation
import UIKit
import Combine
import CoreData

// MARK: - Data Models

class FoodRecognitionManager: ObservableObject {
    // MARK: - Properties
    
    // API –∫–ª—é—á–∏
    private var geminiApiKey: String
    private var edamamAppId: String
    private var edamamAppKey: String
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    @Published var isProcessing: Bool = false
    @Published var recognizedFoods: [RecognizedFood] = []
    @Published var errorMessage: String?
    
    // URL —Å–µ—Å—Å–∏—è –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    private let session: URLSession
    private var cancellables = Set<AnyCancellable>()
    
    // MARK: - Initialization
    
    init(geminiApiKey: String, edamamAppId: String, edamamAppKey: String) {
        self.geminiApiKey = geminiApiKey
        self.edamamAppId = edamamAppId
        self.edamamAppKey = edamamAppKey
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
        let config = URLSessionConfiguration.default
        config.timeoutIntervalForRequest = 30
        self.session = URLSession(configuration: config)
    }
    
    // –£–¥–æ–±–Ω—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±–µ—Ä–µ—Ç –∫–ª—é—á–∏ –∏–∑ UserDefaults
    convenience init() {
        // –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏–º –∫–ª—é—á–∏ API
        FoodRecognitionManager.initializeApiKeys()
        
        // –¢–µ–ø–µ—Ä—å –±–µ—Ä–µ–º –∫–ª—é—á–∏ –∏–∑ UserDefaults
        let geminiKey = UserDefaults.standard.string(forKey: "gemini_api_key") ?? ""
        let edamamId = UserDefaults.standard.string(forKey: "edamam_app_id") ?? ""
        let edamamKey = UserDefaults.standard.string(forKey: "edamam_app_key") ?? ""
        
        self.init(geminiApiKey: geminiKey, edamamAppId: edamamId, edamamAppKey: edamamKey)
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print("üîë FoodRecognitionManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∫–ª—é—á–∞–º–∏:")
        print("   Gemini API: \(geminiKey.prefix(10))...")
        print("   Edamam App ID: \(edamamId)")
        print("   Edamam App Key: \(edamamKey.prefix(10))...")
    }
    
    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API –∫–ª—é—á–µ–π
    static func initializeApiKeys() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
        let defaultGeminiKey = "AIzaSyBJpqVjBzcKAI7D6GLuTVatp-qZgtEtf9I"
        let defaultEdamamAppId = "866cd6b2"
        let defaultEdamamAppKey = "d731d4ccac5db314f017faa8968784a5"
        let defaultFoodDbId = "b8fc1835"
        let defaultFoodDbKey = "3e85e1b27b125c78a76a6605d6d526f0"
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á–∏ –≤ UserDefaults
        UserDefaults.standard.set(defaultGeminiKey, forKey: "gemini_api_key")
        UserDefaults.standard.set(defaultEdamamAppId, forKey: "edamam_app_id")
        UserDefaults.standard.set(defaultEdamamAppKey, forKey: "edamam_app_key")
        UserDefaults.standard.set(defaultFoodDbId, forKey: "edamam_food_db_id")
        UserDefaults.standard.set(defaultFoodDbKey, forKey: "edamam_food_db_key")
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        UserDefaults.standard.synchronize()
        
        print("üîÑ API –∫–ª—é—á–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö API-–∫–ª—é—á–µ–π
    func setDefaultApiKeys() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª—é—á–µ–π –≤ UserDefaults
        FoodRecognitionManager.initializeApiKeys()
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ UserDefaults
        let newGeminiKey = UserDefaults.standard.string(forKey: "gemini_api_key") ?? ""
        let newEdamamId = UserDefaults.standard.string(forKey: "edamam_app_id") ?? ""
        let newEdamamKey = UserDefaults.standard.string(forKey: "edamam_app_key") ?? ""
        
        // –ù–∞–ø—Ä—è–º—É—é –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á–∏ –≤ —Ç–µ–∫—É—â–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä–µ
        self.geminiApiKey = newGeminiKey
        self.edamamAppId = newEdamamId
        self.edamamAppKey = newEdamamKey
        
        print("‚úÖ API –∫–ª—é—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–µ FoodRecognitionManager")
    }
    
    // MARK: - Main Methods
    
    /// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø–∏—â–∏ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    func recognizeFood(from image: UIImage) -> AnyPublisher<[RecognizedFood], FoodRecognitionError> {
        self.isProcessing = true
        self.errorMessage = nil
        
        // 1. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º Gemini Vision API –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø–∏—â–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        return detectFoodWithGemini(image: image)
            .flatMap { foodItems -> AnyPublisher<[RecognizedFood], FoodRecognitionError> in
                // 2. –ü–æ–ª—É—á–∞–µ–º –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
                return self.getNutritionDataForFoods(foods: foodItems, image: image)
            }
            .handleEvents(receiveOutput: { [weak self] foods in
                self?.recognizedFoods = foods
                self?.isProcessing = false
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ CoreData
                for food in foods {
                    self?.saveFoodToCoreData(food: food, image: food.originalImage)
                }
                
                // –í–∞–∂–Ω–æ: –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–¥–µ—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ FoodUpdated,
                // —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ScanCameraView
            }, receiveCompletion: { [weak self] completion in
                self?.isProcessing = false
                if case .failure(let error) = completion {
                    self?.errorMessage = error.localizedDescription
                }
            })
            .eraseToAnyPublisher()
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π –µ–¥—ã –≤ CoreData
    private func saveFoodToCoreData(food: RecognizedFood, image: UIImage?) {
        print("\n===== SAVING FOOD TO CORE DATA =====")
        print("Saving food '\(food.name)' to CoreData")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏
        if food.nutritionData == nil {
            print("‚ö†Ô∏è –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            var updatedFood = food
            updatedFood.nutritionData = NutritionData(
                calories: 100.0,
                protein: 5.0,
                fat: 2.0,
                carbs: 15.0,
                sugar: 1.0,
                fiber: 1.0,
                sodium: 5.0,
                source: "default",
                foodLabel: food.name
            )
            saveFoodToCoreData(food: updatedFood, image: image)
            return
        }
        
        let nutritionData = food.nutritionData!
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ–¥—É–∫—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        let context = CoreDataManager.shared.context
        let fetchRequest: NSFetchRequest<Food> = Food.fetchRequest()
        fetchRequest.predicate = NSPredicate(format: "name == %@", food.name)
        
        do {
            let existingFoods = try context.fetch(fetchRequest)
            
            if let existingFood = existingFoods.first {
                print("‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç —Å –∏–º–µ–Ω–µ–º '\(food.name)' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å.")
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
                existingFood.calories = nutritionData.calories
                existingFood.protein = nutritionData.protein
                existingFood.carbs = nutritionData.carbs
                existingFood.fat = nutritionData.fat
                existingFood.sugar = nutritionData.sugar ?? 0
                existingFood.fiber = nutritionData.fiber ?? 0
                existingFood.sodium = nutritionData.sodium ?? 0
                existingFood.createdAt = Date() // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                
                // –û—á–µ–Ω—å –≤–∞–∂–Ω–æ: —è–≤–Ω–æ –æ—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —ç—Ç–æ –ù–ï –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
                existingFood.isIngredient = false
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥ –≤ UserDefaults
                if let id = existingFood.id?.uuidString {
                    UserDefaults.standard.set(true, forKey: "single_food_\(id)")
                    UserDefaults.standard.set(false, forKey: "food_ingredient_\(id)")
                    
                    // –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                    var deletedFoodIds = UserDefaults.standard.array(forKey: "deletedFoodItems") as? [String] ?? []
                    deletedFoodIds.removeAll { $0 == id }
                    UserDefaults.standard.set(deletedFoodIds, forKey: "deletedFoodItems")
                    
                    var permanentlyDeletedIngredients = UserDefaults.standard.dictionary(forKey: "permanentlyDeletedIngredients") as? [String: String] ?? [:]
                    permanentlyDeletedIngredients.removeValue(forKey: id)
                    UserDefaults.standard.set(permanentlyDeletedIngredients, forKey: "permanentlyDeletedIngredients")
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                if let newImageData = processImageForStorage(image: food.originalImage ?? image),
                   (existingFood.imageData == nil || existingFood.imageData!.count < newImageData.count) {
                    existingFood.imageData = newImageData
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                try context.save()
                print("Successfully updated food '\(food.name)' in CoreData")
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º CoreDataManager –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ UserDefaults
                CoreDataManager.shared.saveFoodItem(food: existingFood)
                
                // –î–µ–ª–∞–µ–º —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
                NavigationCoordinator.shared.recentlyScannedFood = existingFood
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
                UserDefaults.standard.set(existingFood.id?.uuidString, forKey: "lastScannedFoodID")
                UserDefaults.standard.synchronize()
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º UI –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                NotificationCenter.default.post(name: NSNotification.Name("FoodUpdated"), object: nil)
                print("===== FOOD UPDATE COMPLETED =====\n")
                return
            }
        } catch {
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: \(error)")
        }
        
        // –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        let newFood = Food(context: context)
        newFood.id = UUID()
        newFood.name = food.name
        
        // Set nutrition data
        newFood.calories = nutritionData.calories
        newFood.protein = nutritionData.protein
        newFood.carbs = nutritionData.carbs
        newFood.fat = nutritionData.fat
        newFood.sugar = nutritionData.sugar ?? 0
        newFood.fiber = nutritionData.fiber ?? 0
        newFood.sodium = nutritionData.sodium ?? 0
        
        newFood.createdAt = Date()
        newFood.servingSize = 100
        newFood.servingUnit = "–≥"
        
        // –û—á–µ–Ω—å –≤–∞–∂–Ω–æ: —è–≤–Ω–æ –æ—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —ç—Ç–æ –ù–ï –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
        newFood.isIngredient = false
        
        // Process and save image if available
        if let originalImage = food.originalImage ?? image {
            newFood.imageData = processImageForStorage(image: originalImage)
        }
        
        // Save to CoreData
        do {
            try context.save()
            print("Successfully saved food '\(food.name)' to CoreData")
            print("Calories: \(newFood.calories), Protein: \(newFood.protein)g, Carbs: \(newFood.carbs)g, Fat: \(newFood.fat)g")
            
            // –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –≤ UserDefaults
            if let id = newFood.id?.uuidString {
                UserDefaults.standard.set(true, forKey: "single_food_\(id)")
                UserDefaults.standard.set(false, forKey: "food_ingredient_\(id)")
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º CoreDataManager –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ UserDefaults
            CoreDataManager.shared.saveFoodItem(food: newFood)
            
            // Add the nutrients to today's consumption
            NavigationCoordinator.shared.userProfile.addConsumedFood(
                calories: newFood.calories,
                protein: newFood.protein,
                carbs: newFood.carbs,
                fat: newFood.fat
            )
            
            // Set as recently scanned food in NavigationCoordinator
            NavigationCoordinator.shared.recentlyScannedFood = newFood
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
            if let id = newFood.id?.uuidString {
                UserDefaults.standard.set(id, forKey: "lastScannedFoodID")
                UserDefaults.standard.synchronize()
            }
            
            // Notify the UI to update
            NotificationCenter.default.post(name: NSNotification.Name("FoodUpdated"), object: nil)
            print("===== FOOD SAVING COMPLETED =====\n")
        } catch {
            print("Error saving food to CoreData: \(error)")
            print("===== FOOD SAVING FAILED =====\n")
        }
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    private func processImageForStorage(image: UIImage?) -> Data? {
        guard let img = image else {
            print("‚ö†Ô∏è –û–®–ò–ë–ö–ê: –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return nil
        }
        
        // –ü–µ—á–∞—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ö–æ–¥–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        print("üì∏ –û–ë–†–ê–ë–û–¢–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø: –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä \(img.size), scale \(img.scale), orientation \(img.imageOrientation.rawValue)")
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        let normalizedImage = normalizeImageOrientation(img)
        
        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        var resizedImage = normalizedImage
        let minDimension: CGFloat = 200 // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞/–≤—ã—Å–æ—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
        
        // –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        let targetSize: CGSize
        if normalizedImage.size.width < minDimension || normalizedImage.size.height < minDimension {
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            let scale = minDimension / min(normalizedImage.size.width, normalizedImage.size.height)
            targetSize = CGSize(width: normalizedImage.size.width * scale, height: normalizedImage.size.height * scale)
        } else if normalizedImage.size.width > 800 || normalizedImage.size.height > 800 {
            // –£–º–µ–Ω—å—à–∞–µ–º –±–æ–ª—å—à–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            let scale = 800 / max(normalizedImage.size.width, normalizedImage.size.height)
            targetSize = CGSize(width: normalizedImage.size.width * scale, height: normalizedImage.size.height * scale)
        } else {
            // –û—Å—Ç–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            targetSize = normalizedImage.size
        }
        
        // –¢–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if targetSize != normalizedImage.size {
            UIGraphicsBeginImageContextWithOptions(targetSize, false, 0.0)
            normalizedImage.draw(in: CGRect(origin: .zero, size: targetSize))
            if let resized = UIGraphicsGetImageFromCurrentImageContext() {
                resizedImage = resized
            }
            UIGraphicsEndImageContext()
            
            print("‚Üì –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï \(targetSize.width > normalizedImage.size.width ? "–£–í–ï–õ–ò–ß–ï–ù–û" : "–£–ú–ï–ù–¨–®–ï–ù–û"): —Å \(normalizedImage.size) –Ω–∞ \(resizedImage.size)")
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPEG —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        print("üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï JPEG: –†–∞–∑–º–µ—Ä \(resizedImage.size), scale \(resizedImage.scale)")
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        var imageData = resizedImage.jpegData(compressionQuality: 0.95)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç JPEG —Å–∂–∞—Ç–∏—è
        if let data = imageData, data.count < 100 {
            print("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –†–∞–∑–º–µ—Ä JPEG –¥–∞–Ω–Ω—ã—Ö —Å–ª–∏—à–∫–æ–º –º–∞–ª (\(data.count) –±–∞–π—Ç), –ø—Ä–æ–±—É–µ–º PNG")
            // –ï—Å–ª–∏ JPEG –¥–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª—ã, –ø—Ä–æ–±—É–µ–º PNG
            imageData = resizedImage.pngData()
        }
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ —á–∏—Ç–∞—é—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ
        if let finalData = imageData {
            print("‚úÖ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –°–û–•–†–ê–ù–ï–ù–û: \(finalData.count) –±–∞–π—Ç")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ
            if let reloadedImage = UIImage(data: finalData) {
                print("‚úÖ –£–°–ü–ï–®–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Ä–∞–∑–º–µ—Ä \(reloadedImage.size), scale \(reloadedImage.scale)")
                
                // –ï—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —è–±–ª–æ–∫–∞, —É–±–µ–¥–∏–º—Å—è —á—Ç–æ –æ–Ω–æ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                let isApple = img.accessibilityIdentifier == "apple" || (img.accessibilityLabel?.lowercased().contains("apple") ?? false)
                if isApple && finalData.count < 1000 {
                    print("üçé –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —è–±–ª–æ–∫–∞")
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —è–±–ª–æ–∫–∞
                    let size = CGSize(width: 400, height: 400)
                    UIGraphicsBeginImageContextWithOptions(size, false, 0.0)
                    
                    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ–Ω
                    UIColor.systemRed.withAlphaComponent(0.2).setFill()
                    UIBezierPath(rect: CGRect(origin: .zero, size: size)).fill()
                    
                    // –†–∏—Å—É–µ–º —è–±–ª–æ–∫–æ –≤ —Ü–µ–Ω—Ç—Ä–µ
                    reloadedImage.draw(in: CGRect(
                        x: (size.width - reloadedImage.size.width) / 2,
                        y: (size.height - reloadedImage.size.height) / 2,
                        width: reloadedImage.size.width,
                        height: reloadedImage.size.height
                    ))
                    
                    let enhancedImage = UIGraphicsGetImageFromCurrentImageContext()
                    UIGraphicsEndImageContext()
                    
                    if let enhancedData = enhancedImage?.pngData(), enhancedData.count > 1000 {
                        print("üçé –£–õ–£–ß–®–ï–ù–ù–û–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –Ø–ë–õ–û–ö–ê: \(enhancedData.count) –±–∞–π—Ç")
                        return enhancedData
                    }
                }
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                let tempDir = NSTemporaryDirectory()
                let tempPath = tempDir + "debug_image_\(Date().timeIntervalSince1970).jpg"
                
                do {
                    try finalData.write(to: URL(fileURLWithPath: tempPath))
                    print("üìÑ –°–û–•–†–ê–ù–ï–ù –û–¢–õ–ê–î–û–ß–ù–´–ô –§–ê–ô–õ: \(tempPath)")
                } catch {
                    print("‚ùå –û–®–ò–ë–ö–ê –ó–ê–ü–ò–°–ò –û–¢–õ–ê–î–û–ß–ù–û–ì–û –§–ê–ô–õ–ê: \(error)")
                }
                
                return finalData
            } else {
                print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–æ –æ–±—Ä–∞—Ç–Ω–æ!")
                return nil
            }
        } else {
            print("‚ùå –û–®–ò–ë–ö–ê –°–ñ–ê–¢–ò–Ø: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return nil
        }
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    private func normalizeImageOrientation(_ image: UIImage) -> UIImage {
        if image.imageOrientation == .up {
            return image
        }
        
        UIGraphicsBeginImageContextWithOptions(image.size, false, image.scale)
        image.draw(in: CGRect(origin: .zero, size: image.size))
        let normalizedImage = UIGraphicsGetImageFromCurrentImageContext() ?? image
        UIGraphicsEndImageContext()
        
        return normalizedImage
    }
    
    // MARK: - Gemini Vision API
    
    /// –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–∏—â–∏ —Å –ø–æ–º–æ—â—å—é Gemini API
    private func detectFoodWithGemini(image: UIImage) -> AnyPublisher<[RecognizedFood], FoodRecognitionError> {
        guard let resizedImage = resizeImageForGemini(image),
              let imageData = resizedImage.jpegData(compressionQuality: 0.8) else {
            return Fail(error: .imageError("–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")).eraseToAnyPublisher()
        }
        
        let base64Image = imageData.base64EncodedString()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ API –∫–ª—é—á Gemini
        guard !geminiApiKey.isEmpty else {
            return Fail(error: .apiKeyMissing("–ö–ª—é—á API Gemini –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")).eraseToAnyPublisher()
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º URL –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini API
        let urlString = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"
        guard var urlComponents = URLComponents(string: urlString) else {
            return Fail(error: .invalidURL).eraseToAnyPublisher()
        }
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞
        urlComponents.queryItems = [
            URLQueryItem(name: "key", value: geminiApiKey)
        ]
        
        guard let url = urlComponents.url else {
            return Fail(error: .networkError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å URL")).eraseToAnyPublisher()
        }
        
        // –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ - –ø—Ä–æ—Å–∏–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ –∑–∞ –µ–¥–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        let prompt = """
        Identify the food items in this image. You are specialized in food recognition.
        Provide a JSON list of objects with properties 'name' and 'confidence'. 
        If you can't identify any specific food items, return an empty array [].
        Important: only respond with valid JSON, no other text.
        Example response: [{"name": "Apple", "confidence": 0.95}, {"name": "Yogurt", "confidence": 0.85}]
        Or if no food is detected: []
        """
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.addValue("application/json", forHTTPHeaderField: "Content-Type")
        
        // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–º–µ—Ä–∞ –∏–∑ Google AI Studio)
        let requestBody: [String: Any] = [
            "contents": [
                [
                    "parts": [
                        ["text": prompt],
                        [
                            "inline_data": [
                                "mime_type": "image/jpeg",
                                "data": base64Image
                            ]
                        ]
                    ]
                ]
            ],
            "generationConfig": [
                "temperature": 0.1,
                "topK": 32,
                "topP": 1,
                "maxOutputTokens": 2048
            ]
        ]
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ JSON
        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: requestBody)
        } catch {
            return Fail(error: .recognitionFailed("–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: \(error.localizedDescription)")).eraseToAnyPublisher()
        }
        
        // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        return session.dataTaskPublisher(for: request)
            .tryMap { data, response -> Data in
                guard let httpResponse = response as? HTTPURLResponse else {
                    print("–û—à–∏–±–∫–∞: –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è HTTP –æ—Ç–≤–µ—Ç–æ–º")
                    throw FoodRecognitionError.networkError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏")
                }
                
                print("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API —Å –∫–æ–¥–æ–º: \(httpResponse.statusCode)")
                
                guard (200...299).contains(httpResponse.statusCode) else {
                    let responseString = String(data: data, encoding: .utf8) ?? "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                    print("–û—à–∏–±–∫–∞ API: \(responseString)")
                    throw FoodRecognitionError.networkError("–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: \(responseString)")
                }
                return data
            }
            .decode(type: FoodRecognitionGeminiResponse.self, decoder: JSONDecoder())
            .tryMap { response -> [RecognizedFood] in
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
                guard let content = response.candidates?.first?.content,
                      let text = content.parts?.first?.text else {
                    throw FoodRecognitionError.invalidResponse
                }
                
                // –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                let recognizedFoods = try self.parseFoodItemsFromGeminiResponse(text: text, image: image)
                
                // –ï—Å–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –∑–Ω–∞—á–∏—Ç –µ–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                if recognizedFoods.isEmpty {
                    throw FoodRecognitionError.recognitionFailed("–ï–¥–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏")
                }
                
                return recognizedFoods
            }
            .mapError { error -> FoodRecognitionError in
                if let recognitionError = error as? FoodRecognitionError {
                    return recognitionError
                }
                return .recognitionFailed("–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: \(error.localizedDescription)")
            }
            .eraseToAnyPublisher()
    }
    
    /// –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞ Gemini
    private func parseFoodItemsFromGeminiResponse(text: String, image: UIImage) throws -> [RecognizedFood] {
        print("–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini: \(text)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –µ–¥—ã
        let noFoodPhrases = ["no food", "empty array", "couldn't identify", "could not identify", "[]", "no specific food", "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"]
        
        for phrase in noFoodPhrases {
            if text.lowercased().contains(phrase.lowercased()) {
                print("Gemini –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª –µ–¥—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏")
                return [] // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –µ–¥—ã
            }
        }
        
        // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ JSON –≤ —Ç–µ–∫—Å—Ç–µ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
        // 1. –ò—â–µ–º –º–∞—Å—Å–∏–≤ JSON [...]
        let jsonArrayRegex = try? NSRegularExpression(pattern: "\\[\\s*\\{[^\\[\\]]*\\}\\s*\\]")
        let fullRange = NSRange(text.startIndex..<text.endIndex, in: text)
        
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –º–∞—Å—Å–∏–≤ JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if let arrayMatch = jsonArrayRegex?.firstMatch(in: text, range: fullRange),
           let range = Range(arrayMatch.range, in: text) {
            let jsonText = String(text[range])
            print("–ù–∞–π–¥–µ–Ω JSON –º–∞—Å—Å–∏–≤: \(jsonText)")
            
            do {
                let jsonData = jsonText.data(using: .utf8)!
                let foods = try JSONDecoder().decode([GeminiFoodItem].self, from: jsonData)
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏
                if foods.isEmpty || foods.allSatisfy({ $0.name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty }) {
                    print("Gemini –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
                    return []
                }
                
                return foods.map { item in
                    // –£–ª—É—á—à–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
                    let formattedName = formatFoodName(item.name)
                    return RecognizedFood(
                        name: formattedName,
                        confidence: item.confidence ?? 0.9,
                        originalImage: image
                    )
                }
            } catch {
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON –º–∞—Å—Å–∏–≤–∞: \(error)")
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ –¥—Ä—É–≥–∏–º –º–µ—Ç–æ–¥–∞–º –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
            }
        }
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Ç–µ–∫—Å—Ç–µ –æ—Ç–≤–µ—Ç–∞
        if text.contains("[]") || text.contains("[ ]") {
            print("Gemini –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π JSON –º–∞—Å—Å–∏–≤")
            return []
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ–¥—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏")
        return []
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞, –¥–µ–ª–∞—è –µ–≥–æ –±–æ–ª–µ–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞–±–µ–ª—å–Ω—ã–º
    private func formatFoodName(_ name: String) -> String {
        // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        var formatted = name.trimmingCharacters(in: .whitespacesAndNewlines)
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –≤–∏–¥—É
        formatted = formatted.replacingOccurrences(of: "_", with: " ")
        formatted = formatted.replacingOccurrences(of: "-", with: " ")
        
        // –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–æ–π
        let words = formatted.components(separatedBy: " ")
        let capitalizedWords = words.map { word in
            if !word.isEmpty {
                return word.prefix(1).uppercased() + word.dropFirst().lowercased()
            }
            return word
        }
        
        formatted = capitalizedWords.joined(separator: " ")
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        let replacements: [String: String] = [
            "Coca-cola": "Coca-Cola",
            "Coca Cola": "Coca-Cola",
            "–Ø–±–ª–æ–∫–æ": "Apple",
            "–ê–ø–µ–ª—å—Å–∏–Ω": "Orange",
            "–ë–∞–Ω–∞–Ω": "Banana"
        ]
        
        if let replacement = replacements[formatted] {
            return replacement
        }
        
        return formatted
    }
    
    /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    private func extractFoodFromText(_ text: String) -> String? {
        // –£–¥–∞–ª—è–µ–º —ç—Ç–æ—Ç –º–µ—Ç–æ–¥, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        return nil
    }
    
    // MARK: - Edamam API
    
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    private func getNutritionDataForFoods(foods: [RecognizedFood], image: UIImage) -> AnyPublisher<[RecognizedFood], FoodRecognitionError> {
        // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        guard !foods.isEmpty else {
            return Just([]).setFailureType(to: FoodRecognitionError.self).eraseToAnyPublisher()
        }
        
        print("–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è \(foods.count) –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        
        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        let requests = foods.map { food in
            return getNutritionData(for: food.name)
                .map { nutritionData -> RecognizedFood in
                    print("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è \(food.name): \(nutritionData.calories) –∫–∫–∞–ª")
                    var updatedFood = food
                    updatedFood.nutritionData = nutritionData
                    
                    // –í–∞–∂–Ω–æ: —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
                    if updatedFood.originalImage == nil {
                        updatedFood.originalImage = image
                    }
                    
                    return updatedFood
                }
                .catch { error -> AnyPublisher<RecognizedFood, Never> in
                    // –ü—Ä–∏ –æ—à–∏–±–∫–µ API —Å–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥—É–∫—Ç –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–æ–±–∞–≤–∏–ª—Å—è
                    print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è \(food.name): \(error.localizedDescription)")
                    
                    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏
                    let defaultNutrition = NutritionData(
                        calories: 100.0,
                        protein: 5.0,
                        fat: 2.0,
                        carbs: 15.0,
                        sugar: 1.0,
                        fiber: 1.0,
                        sodium: 5.0,
                        source: "default",
                        foodLabel: food.name
                    )
                    
                    var foodWithDefaultValues = food
                    foodWithDefaultValues.nutritionData = defaultNutrition
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    if foodWithDefaultValues.originalImage == nil {
                        foodWithDefaultValues.originalImage = image
                    }
                    
                    return Just(foodWithDefaultValues).eraseToAnyPublisher()
                }
                .eraseToAnyPublisher()
        }
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –æ–¥–∏–Ω –∏–∑–¥–∞—Ç–µ–ª—å
        return Publishers.MergeMany(requests)
            .collect()
            .setFailureType(to: FoodRecognitionError.self)
            .eraseToAnyPublisher()
    }
    
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    private func getNutritionData(for foodName: String) -> AnyPublisher<NutritionData, Error> {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
        let edamamId = UserDefaults.standard.string(forKey: "edamam_app_id") ?? "866cd6b2"
        let edamamKey = UserDefaults.standard.string(forKey: "edamam_app_key") ?? "d731d4ccac5db314f017faa8968784a5"
        
        // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å API –∫–ª—é—á–∏
        guard !edamamId.isEmpty, !edamamKey.isEmpty else {
            print("‚ö†Ô∏è –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –∫–ª—é—á–∏ Edamam –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤")
            return Fail(error: FoodRecognitionError.nutritionAnalysisFailed("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –∫–ª—é—á–∏ Edamam")).eraseToAnyPublisher()
        }
        
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ URL
        let urlString = "https://api.edamam.com/api/nutrition-data"
        guard var urlComponents = URLComponents(string: urlString) else {
            return Fail(error: FoodRecognitionError.networkError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π URL")).eraseToAnyPublisher()
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∫–∞–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
        // –ü—Ä–∏–º–µ—Ä: "100g apple"
        let ingredient = "100g \(foodName)"
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ API
        urlComponents.queryItems = [
            URLQueryItem(name: "app_id", value: edamamId),
            URLQueryItem(name: "app_key", value: edamamKey),
            URLQueryItem(name: "ingr", value: ingredient)
        ]
        
        guard let url = urlComponents.url else {
            return Fail(error: FoodRecognitionError.networkError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å URL")).eraseToAnyPublisher()
        }
        
        print("üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Edamam API (Nutrition Analysis):")
        print("   URL: \(url)")
        print("   App ID: \(edamamId)")
        print("   –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: \(ingredient)")
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        
        // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        return session.dataTaskPublisher(for: request)
            .tryMap { data, response -> Data in
                guard let httpResponse = response as? HTTPURLResponse else {
                    print("–û—à–∏–±–∫–∞: –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è HTTP –æ—Ç–≤–µ—Ç–æ–º")
                    throw FoodRecognitionError.networkError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏")
                }
                
                print("üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API —Å –∫–æ–¥–æ–º: \(httpResponse.statusCode)")
                
                guard (200...299).contains(httpResponse.statusCode) else {
                    let responseString = String(data: data, encoding: .utf8) ?? "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                    print("‚ùå –û—à–∏–±–∫–∞ API: \(responseString)")
                    throw FoodRecognitionError.networkError("–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: \(responseString)")
                }
                return data
            }
            .decode(type: EdamamResponse.self, decoder: JSONDecoder())
            .tryMap { response -> NutritionData in
                // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ Edamam –≤ –Ω–∞—à—É –º–æ–¥–µ–ª—å NutritionData
                let calories = response.calories
                let protein = response.totalNutrients.PROCNT?.quantity ?? 0
                let fat = response.totalNutrients.FAT?.quantity ?? 0
                let carbs = response.totalNutrients.CHOCDF?.quantity ?? 0
                let sugar = response.totalNutrients.SUGAR?.quantity
                let fiber = response.totalNutrients.FIBTG?.quantity
                let sodium = response.totalNutrients.NA?.quantity
                
                print("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è \(foodName): –∫–∞–ª–æ—Ä–∏–∏=\(calories), –±–µ–ª–∫–∏=\(protein), –∂–∏—Ä—ã=\(fat), —É–≥–ª–µ–≤–æ–¥—ã=\(carbs)")
                
                return NutritionData(
                    calories: calories,
                    protein: protein,
                    fat: fat,
                    carbs: carbs,
                    sugar: sugar,
                    fiber: fiber,
                    sodium: sodium,
                    source: "edamam",
                    foodLabel: foodName
                )
            }
            .mapError { error -> Error in
                if let nutritionError = error as? FoodRecognitionError {
                    return nutritionError
                }
                print("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤: \(error.localizedDescription)")
                return FoodRecognitionError.nutritionAnalysisFailed("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤: \(error.localizedDescription)")
            }
            .eraseToAnyPublisher()
    }
    
    // MARK: - Helper Methods
    
    /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å API –∫–ª—é—á–∏
    func saveApiKeys(geminiKey: String, edamamAppId: String, edamamAppKey: String, foodDbId: String = "", foodDbKey: String = "") {
        UserDefaults.standard.set(geminiKey, forKey: "gemini_api_key")
        UserDefaults.standard.set(edamamAppId, forKey: "edamam_app_id")
        UserDefaults.standard.set(edamamAppKey, forKey: "edamam_app_key")
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–∏ –¥–ª—è Food Database API, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
        if !foodDbId.isEmpty {
            UserDefaults.standard.set(foodDbId, forKey: "edamam_food_db_id")
        }
        
        if !foodDbKey.isEmpty {
            UserDefaults.standard.set(foodDbKey, forKey: "edamam_food_db_key")
        }
        
        UserDefaults.standard.synchronize()
    }
    
    /// Resize image for Gemini API
    private func resizeImageForGemini(_ image: UIImage) -> UIImage? {
        // Gemini API has image size limits, so we resize the image to be under these limits
        let maxDimension: CGFloat = 1024
        
        let originalSize = image.size
        var newSize = originalSize
        
        // Calculate the new size, maintaining aspect ratio
        if originalSize.width > maxDimension || originalSize.height > maxDimension {
            if originalSize.width > originalSize.height {
                newSize.height = originalSize.height / originalSize.width * maxDimension
                newSize.width = maxDimension
            } else {
                newSize.width = originalSize.width / originalSize.height * maxDimension
                newSize.height = maxDimension
            }
        } else {
            // Image is already small enough
            return image
        }
        
        // Create a new image with the calculated size
        UIGraphicsBeginImageContextWithOptions(newSize, false, 0.0)
        image.draw(in: CGRect(origin: .zero, size: newSize))
        let resizedImage = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        
        print("Resized image from \(originalSize) to \(newSize) for Gemini API")
        return resizedImage
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    private func determineRealFoodName(image: UIImage) -> String {
        // –¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã
        // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ —Å–∞–º –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ–¥—ã, –µ—Å–ª–∏ Gemini –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å
        return ""
    }
    
    // –í—ã–±–∏—Ä–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–∫–æ–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    private func getFoodIconName(_ foodName: String) -> String {
        // –í–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥
        // –í—Å–µ –∏–∫–æ–Ω–∫–∏ –±—É–¥—É—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å—Å—è –∏–∑ Edamam API
        // –ê –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∏–∫–æ–Ω–∫—É
        return "circle.grid.2x2.fill" // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∏–∫–æ–Ω–∫–∞ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    }
    
    // –í—ã–±–∏—Ä–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è –∏–∫–æ–Ω–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    private func getFoodIconColor(_ foodName: String) -> UIColor {
        // –í–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç
        // –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API
        return .systemBlue // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    }
    
    // MARK: - Handling Multiple Foods
    func createCombinedFoodFromRecognizedFoods(name: String, foods: [RecognizedFood], image: UIImage?) {
        print("\n===== HANDLING MULTIPLE DETECTED FOODS =====")
        print("Creating combined dish '\(name)' with \(foods.count) ingredients")
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç Edamam
        let foodsWithEdamamData = foods.filter { $0.nutritionData?.source == "edamam" }
        
        guard !foodsWithEdamamData.isEmpty else {
            print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç Edamam API")
            print("===== MULTIPLE FOOD HANDLING FAILED =====\n")
            return
        }
        
        // 1. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ
        let context = CoreDataManager.shared.context
        let mainDish = Food(context: context)
        mainDish.id = UUID()
        mainDish.name = name
        mainDish.createdAt = Date()
        mainDish.servingSize = 100
        mainDish.servingUnit = "–≥"
        
        // –í–∞–∂–Ω–æ: —ç—Ç–æ —è–≤–Ω–æ –ù–ï –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
        mainDish.isIngredient = false
        
        // 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        var totalCalories: Double = 0
        var totalProtein: Double = 0
        var totalCarbs: Double = 0
        var totalFat: Double = 0
        var totalSugar: Double = 0
        var totalFiber: Double = 0
        var totalSodium: Double = 0
        
        // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        var createdIngredients: [Food] = []
        
        // 3. –°–æ–∑–¥–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫ –±–ª—é–¥—É
        for foodItem in foodsWithEdamamData {
            guard let nutritionData = foodItem.nutritionData else { continue }
            
            // 3.1 –î–æ–±–∞–≤–ª—è–µ–º –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞ –∫ –æ–±—â–µ–π —Å—É–º–º–µ
            totalCalories += nutritionData.calories
            totalProtein += nutritionData.protein
            totalCarbs += nutritionData.carbs
            totalFat += nutritionData.fat
            if let sugar = nutritionData.sugar { totalSugar += sugar }
            if let fiber = nutritionData.fiber { totalFiber += fiber }
            if let sodium = nutritionData.sodium { totalSodium += sodium }
            
            // 3.2 –°–æ–∑–¥–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
            let ingredient = Food(context: context)
            ingredient.id = UUID()
            ingredient.name = foodItem.name
            ingredient.calories = nutritionData.calories
            ingredient.protein = nutritionData.protein
            ingredient.carbs = nutritionData.carbs
            ingredient.fat = nutritionData.fat
            ingredient.sugar = nutritionData.sugar ?? 0
            ingredient.fiber = nutritionData.fiber ?? 0
            ingredient.sodium = nutritionData.sodium ?? 0
            ingredient.createdAt = Date()
            ingredient.servingSize = 100
            ingredient.servingUnit = "–≥"
            
            // –í–∞–∂–Ω–æ: —ç—Ç–æ —è–≤–Ω–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
            ingredient.isIngredient = true
            
            // –ï—Å–ª–∏ —É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
            if let originalImage = foodItem.originalImage {
                ingredient.imageData = processImageForStorage(image: originalImage)
            }
            
            // 3.3 –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É –±–ª—é–¥–æ–º –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º
            let ingredientEntity = Ingredient(context: context)
            ingredientEntity.id = UUID()
            ingredientEntity.name = foodItem.name
            ingredientEntity.calories = nutritionData.calories
            ingredientEntity.protein = nutritionData.protein
            ingredientEntity.carbs = nutritionData.carbs
            ingredientEntity.fat = nutritionData.fat
            ingredientEntity.amount = 1.0
            ingredientEntity.unit = "–ø–æ—Ä—Ü–∏—è"
            ingredientEntity.food = ingredient
            
            // 3.4 –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–ª—é–¥—É
            mainDish.addToIngredients(ingredientEntity)
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
            createdIngredients.append(ingredient)
            
            // 3.5 –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ UserDefaults –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            if let id = ingredient.id?.uuidString {
                UserDefaults.standard.set(true, forKey: "food_ingredient_\(id)")
                UserDefaults.standard.set(false, forKey: "single_food_\(id)")
            }
        }
        
        // 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª—é–¥–∞
        mainDish.calories = totalCalories
        mainDish.protein = totalProtein
        mainDish.carbs = totalCarbs
        mainDish.fat = totalFat
        mainDish.sugar = totalSugar
        mainDish.fiber = totalFiber
        mainDish.sodium = totalSodium
        
        // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª—é–¥–∞
        if let originalImage = image ?? foodsWithEdamamData.first?.originalImage {
            mainDish.imageData = processImageForStorage(image: originalImage)
        }
        
        // 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CoreData
        do {
            try context.save()
            print("‚úÖ Successfully saved combined dish '\(name)' with \(createdIngredients.count) ingredients")
            
            // 7. –û—Ç–º–µ—á–∞–µ–º –±–ª—é–¥–æ –∫–∞–∫ –ù–ï –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≤ UserDefaults
            if let id = mainDish.id?.uuidString {
                UserDefaults.standard.set(false, forKey: "food_ingredient_\(id)")
                UserDefaults.standard.set(true, forKey: "single_food_\(id)")
                UserDefaults.standard.set(id, forKey: "lastScannedFoodID")
            }
            
            // 8. –î–æ–±–∞–≤–ª—è–µ–º –≤ Recently Logged
            CoreDataManager.shared.saveFoodItem(food: mainDish)
            
            // 9. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
            NavigationCoordinator.shared.recentlyScannedFood = mainDish
            
            // 10. –£–¥–∞–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            ensureIngredientsRemovedFromHistory(ingredients: createdIngredients)
            
            // 11. –£–≤–µ–¥–æ–º–ª—è–µ–º UI –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            NotificationCenter.default.post(name: NSNotification.Name("FoodUpdated"), object: nil)
            
            print("===== MULTIPLE FOOD HANDLING COMPLETED =====\n")
        } catch {
            print("‚ùå Error saving combined dish to CoreData: \(error)")
            print("===== MULTIPLE FOOD HANDLING FAILED =====\n")
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –µ–¥—ã
    private func clearIngredientsFromHistory(ingredientNames: [String]) {
        guard var foodHistory = UserDefaults.standard.array(forKey: "foodHistory") as? [[String: Any]] else {
            return
        }
        
        let initialCount = foodHistory.count
        print("FoodRecognitionManager: –û—á–∏—Å—Ç–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –µ–¥—ã (–¥–æ: \(initialCount) –∑–∞–ø–∏—Å–µ–π)")
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏, –∏–º—è –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏–º–µ–Ω–∞–º–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        foodHistory.removeAll { item in
            if let name = item["name"] as? String {
                let found = ingredientNames.contains { $0.lowercased() == name.lowercased() }
                if found {
                    print("FoodRecognitionManager: –£–¥–∞–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç '\(name)' –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –µ–¥—ã")
                }
                return found
            }
            return false
        }
        
        if initialCount != foodHistory.count {
            UserDefaults.standard.set(foodHistory, forKey: "foodHistory")
            UserDefaults.standard.synchronize()
            print("FoodRecognitionManager: –ò—Å—Ç–æ—Ä–∏—è –µ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (–ø–æ—Å–ª–µ: \(foodHistory.count) –∑–∞–ø–∏—Å–µ–π)")
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞
    private func ensureIngredientsRemovedFromHistory(ingredients: [Food]) {
        guard var foodHistory = UserDefaults.standard.array(forKey: "foodHistory") as? [[String: Any]] else {
            return
        }
        
        let initialCount = foodHistory.count
        print("FoodRecognitionManager: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (–¥–æ: \(initialCount) –∑–∞–ø–∏—Å–µ–π)")
        
        var historyChanged = false
        
        // –£–¥–∞–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –ø–æ ID –∏ –∏–º–µ–Ω–∏
        for ingredient in ingredients {
            if let id = ingredient.id?.uuidString {
                let countBefore = foodHistory.count
                foodHistory.removeAll { item in
                    if let itemId = item["id"] as? String, itemId == id {
                        print("FoodRecognitionManager: –£–¥–∞–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –ø–æ ID '\(id)' –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –µ–¥—ã")
                        return true
                    }
                    return false
                }
                if countBefore != foodHistory.count {
                    historyChanged = true
                }
            }
            
            if let name = ingredient.name {
                let countBefore = foodHistory.count
                foodHistory.removeAll { item in
                    if let itemName = item["name"] as? String, itemName.lowercased() == name.lowercased() {
                        print("FoodRecognitionManager: –£–¥–∞–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –ø–æ –∏–º–µ–Ω–∏ '\(name)' –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –µ–¥—ã")
                        return true
                    }
                    return false
                }
                if countBefore != foodHistory.count {
                    historyChanged = true
                }
            }
        }
        
        if historyChanged {
            UserDefaults.standard.set(foodHistory, forKey: "foodHistory")
            UserDefaults.standard.synchronize()
            print("FoodRecognitionManager: –ò—Å—Ç–æ—Ä–∏—è –µ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ—Å–ª–µ: \(foodHistory.count) –∑–∞–ø–∏—Å–µ–π)")
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º UI –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            DispatchQueue.main.async {
                NotificationCenter.default.post(name: NSNotification.Name("FoodUpdated"), object: nil)
            }
        }
    }
    
    // Method to create an individual food item from a recognized food
    func createIndividualFoodItem(recognizedFood: RecognizedFood, image: UIImage?) {
        saveFoodToCoreData(food: recognizedFood, image: image)
    }
}

// MARK: - Response Models

// –ú–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ Gemini
struct FoodRecognitionGeminiResponse: Codable {
    let candidates: [GeminiCandidate]?
}

struct GeminiCandidate: Codable {
    let content: GeminiContent?
}

struct GeminiContent: Codable {
    let parts: [GeminiPart]?
}

struct GeminiPart: Codable {
    let text: String?
}

// –ú–æ–¥–µ–ª—å –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ Gemini
struct GeminiFoodItem: Codable {
    let name: String
    let confidence: Double?
}

// –ú–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ Edamam
struct EdamamResponse: Codable {
    let calories: Double
    let totalNutrients: EdamamNutrients
}

struct EdamamNutrients: Codable {
    let PROCNT: EdamamNutrient? // Protein
    let FAT: EdamamNutrient? // Fat
    let CHOCDF: EdamamNutrient? // Carbohydrates
    let SUGAR: EdamamNutrient? // Sugar
    let FIBTG: EdamamNutrient? // Fiber
    let NA: EdamamNutrient? // Sodium
}

struct EdamamNutrient: Codable {
    let quantity: Double
    let unit: String
}






