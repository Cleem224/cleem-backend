import Foundation
import UIKit
import Combine
import CoreData
import Vision

/// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –µ–¥—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞:
/// 1. Gemini –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –±–ª—é–¥–∞
/// 2. GPT-4 –¥–ª—è –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
/// 3. Spoonacular –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞—Ö
/// 4. –°—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
class FoodRecognitionManagerV2: ObservableObject {
    // MARK: - Properties
    
    // API –∫–ª—é—á–∏
    private var geminiApiKey: String
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    @Published var isProcessing: Bool = false
    @Published var recognizedFoods: [RecognizedFoodV2] = []
    @Published var errorMessage: String?
    
    // –°–µ—Ä–≤–∏—Å—ã
    private let openAIService: OpenAIService
    private let spoonacularService: SpoonacularService
    
    // –ö–ª—é—á–∏ Edamam API
    private var edamamAppId: String
    private var edamamAppKey: String
    
    // URL —Å–µ—Å—Å–∏—è –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    private let session: URLSession
    private var cancellables = Set<AnyCancellable>()
    
    // –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gemini API
    private struct GeminiResponse: Decodable {
        let candidates: [Candidate]?
        
        struct Candidate: Decodable {
            let content: Content?
            let finishReason: String?
        }
        
        struct Content: Decodable {
            let parts: [Part]?
            let role: String?
        }
        
        struct Part: Decodable {
            let text: String?
        }
    }
    
    // –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Edamam API
    private struct EdamamResponse: Decodable {
        let calories: Double
        let totalWeight: Double
        let dietLabels: [String]
        let healthLabels: [String]
        let cautions: [String]
        let totalNutrients: Nutrients
        let totalDaily: Nutrients
        
        struct Nutrients: Decodable {
            let ENERC_KCAL: NutrientInfo?
            let PROCNT: NutrientInfo?  // –ë–µ–ª–∫–∏
            let FAT: NutrientInfo?     // –ñ–∏—Ä—ã
            let CHOCDF: NutrientInfo?  // –£–≥–ª–µ–≤–æ–¥—ã
            let FIBTG: NutrientInfo?   // –ö–ª–µ—Ç—á–∞—Ç–∫–∞
            let SUGAR: NutrientInfo?   // –°–∞—Ö–∞—Ä
            let NA: NutrientInfo?      // –ù–∞—Ç—Ä–∏–π
            let CA: NutrientInfo?      // –ö–∞–ª—å—Ü–∏–π
            let CHOLE: NutrientInfo?   // –•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω
        }
        
        struct NutrientInfo: Decodable {
            let label: String
            let quantity: Double
            let unit: String
        }
    }
    
    // –ö—ç—à –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    private var translationCache: [String: String] = [:]
    
    // MARK: - Initialization
    
    init(geminiApiKey: String, edamamAppId: String, edamamAppKey: String) {
        self.geminiApiKey = geminiApiKey
        self.edamamAppId = edamamAppId
        self.edamamAppKey = edamamAppKey
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.openAIService = OpenAIService.shared
        self.spoonacularService = SpoonacularService.shared
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
        let config = URLSessionConfiguration.default
        config.timeoutIntervalForRequest = 30
        self.session = URLSession(configuration: config)
    }
    
    // –£–¥–æ–±–Ω—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±–µ—Ä–µ—Ç –∫–ª—é—á–∏ –∏–∑ UserDefaults
    convenience init() {
        // –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏–º –∫–ª—é—á–∏ API
        FoodRecognitionManagerV2.initializeApiKeys()
        
        // –¢–µ–ø–µ—Ä—å –±–µ—Ä–µ–º –∫–ª—é—á–∏ –∏–∑ UserDefaults
        let geminiKey = UserDefaults.standard.string(forKey: "gemini_api_key") ?? ""
        let edamamId = UserDefaults.standard.string(forKey: "edamam_app_id") ?? ""
        let edamamKey = UserDefaults.standard.string(forKey: "edamam_app_key") ?? ""
        
        self.init(geminiApiKey: geminiKey, edamamAppId: edamamId, edamamAppKey: edamamKey)
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print("üîë FoodRecognitionManagerV2 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∫–ª—é—á–∞–º–∏:")
        print("   Gemini API: \(geminiKey.prefix(10))...")
        print("   Edamam API: ID=\(edamamId), Key=\(edamamKey.prefix(10))...")
    }
    
    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API –∫–ª—é—á–µ–π
    static func initializeApiKeys() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
        let defaultGeminiKey = "YOUR_GEMINI_API_KEY"
        let defaultSpoonacularKey = "YOUR_SPOONACULAR_KEY"
        let defaultOpenAIKey = "YOUR_OPENAI_API_KEY"
        let defaultEdamamAppId = "YOUR_EDAMAM_APP_ID"
        let defaultEdamamAppKey = "YOUR_EDAMAM_APP_KEY"
        let defaultGoogleTranslateKey = "YOUR_GOOGLE_TRANSLATE_KEY"
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á–∏ –≤ UserDefaults
        UserDefaults.standard.set(defaultGeminiKey, forKey: "gemini_api_key")
        UserDefaults.standard.set(defaultSpoonacularKey, forKey: "spoonacular_api_key")
        UserDefaults.standard.set(defaultOpenAIKey, forKey: "openai_api_key")
        UserDefaults.standard.set(defaultEdamamAppId, forKey: "edamam_app_id")
        UserDefaults.standard.set(defaultEdamamAppKey, forKey: "edamam_app_key")
        UserDefaults.standard.set(defaultGoogleTranslateKey, forKey: "google_translate_api_key")
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        UserDefaults.standard.synchronize()
        
        print("üîÑ API –∫–ª—é—á–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö API-–∫–ª—é—á–µ–π
    func setDefaultApiKeys() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª—é—á–µ–π –≤ UserDefaults
        FoodRecognitionManagerV2.initializeApiKeys()
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ UserDefaults
        let newGeminiKey = UserDefaults.standard.string(forKey: "gemini_api_key") ?? ""
        let newEdamamAppId = UserDefaults.standard.string(forKey: "edamam_app_id") ?? ""
        let newEdamamAppKey = UserDefaults.standard.string(forKey: "edamam_app_key") ?? ""
        
        // –ù–∞–ø—Ä—è–º—É—é –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á–∏ –≤ —Ç–µ–∫—É—â–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä–µ
        self.geminiApiKey = newGeminiKey
        self.edamamAppId = newEdamamAppId
        self.edamamAppKey = newEdamamAppKey
        
        print("‚úÖ API –∫–ª—é—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–µ FoodRecognitionManagerV2")
    }
    
    // MARK: - Main Methods
    
    /// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø–∏—â–∏ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é (–Ω–æ–≤—ã–π –ø–∞–π–ø–ª–∞–π–Ω)
    func recognizeFood(from image: UIImage) -> AnyPublisher<[RecognizedFoodV2], FoodRecognitionError> {
        self.isProcessing = true
        self.errorMessage = nil
        
        print("üçè Starting food recognition with new pipeline")
        
        // 1. –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –±–ª—é–¥–æ —Å –ø–æ–º–æ—â—å—é Gemini
        return detectDishWithGemini(image: image)
            .catch { error -> AnyPublisher<String, FoodRecognitionError> in
                // Check if it's a 503 error (service unavailable)
                if error.localizedDescription.contains("503") || 
                   error.localizedDescription.contains("overloaded") {
                    print("‚ö†Ô∏è Gemini API unavailable (503 error), falling back to Vision framework")
                    self.errorMessage = "Cloud API overloaded. Using on-device recognition instead."
                    // Fallback to on-device Vision framework
                    return self.detectDishWithVision(image: image)
                }
                return Fail(error: error).eraseToAnyPublisher()
            }
            .flatMap { dishName -> AnyPublisher<(String, [String]), FoodRecognitionError> in
                print("‚úÖ Step 1: Dish recognized as \(dishName)")
                
                // 2. –†–∞–∑–±–∏–≤–∞–µ–º –±–ª—é–¥–æ –Ω–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å –ø–æ–º–æ—â—å—é GPT-4
                return self.decomposeWithGPT4(dishName: dishName, image: image)
                    .map { ingredients -> (String, [String]) in
                        // Check if ingredients array is not empty
                        if ingredients.isEmpty {
                            print("‚ö†Ô∏è Warning: Empty ingredients array, using dish name as single ingredient")
                            return (dishName, [dishName])
                        }
                        return (dishName, ingredients)
                    }
                    .mapError { error -> FoodRecognitionError in
                        print("‚ùå Error decomposing dish: \(error)")
                        // Fall back to using the dish name as a single ingredient
                        return .decompositionFailed(error.localizedDescription)
                    }
                    .catch { error -> AnyPublisher<(String, [String]), FoodRecognitionError> in
                        // Fallback to using the dish name as a single ingredient if decomposition fails
                        print("‚ö†Ô∏è Decomposition failed, using dish name as single ingredient")
                        return Just((dishName, [dishName]))
                            .setFailureType(to: FoodRecognitionError.self)
                            .eraseToAnyPublisher()
                    }
                    .eraseToAnyPublisher()
            }
            .flatMap { (dishName, ingredients) -> AnyPublisher<[RecognizedFoodV2], FoodRecognitionError> in
                print("‚úÖ Step 2: Dish decomposed into ingredients: \(ingredients.joined(separator: ", "))")
                
                // 3. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞—Ö –∏–∑ Edamam –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
                return self.getNutritionDataFromEdamam(dishName: dishName, ingredients: ingredients, image: image)
            }
            .handleEvents(receiveOutput: { [weak self] foods in
                self?.recognizedFoods = foods
                self?.isProcessing = false
                
                // Validate that we have foods with nutrition data
                if foods.isEmpty {
                    print("‚ö†Ô∏è Warning: No recognized foods returned")
                    self?.errorMessage = "No recognized foods returned"
                    return
                }
                
                // Check if nutrition data is valid
                let validFoods = foods.filter { $0.nutritionData?.calories ?? 0 > 0 }
                if validFoods.isEmpty {
                    print("‚ö†Ô∏è Warning: No foods with valid nutrition data")
                    self?.errorMessage = "No foods with valid nutrition data"
                    return
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ CoreData
                for food in foods {
                    self?.saveFoodToCoreData(food: food, image: food.originalImage)
                }
            }, receiveCompletion: { [weak self] completion in
                self?.isProcessing = false
                if case .failure(let error) = completion {
                    self?.errorMessage = error.localizedDescription
                    print("‚ùå Food recognition pipeline failed: \(error.localizedDescription)")
                }
            })
            .eraseToAnyPublisher()
    }
    
    // MARK: - Step 1: Gemini Vision API
    
    /// –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ —Å –ø–æ–º–æ—â—å—é Gemini API
    private func detectDishWithGemini(image: UIImage) -> AnyPublisher<String, FoodRecognitionError> {
        let endpoint = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"
        let queryItems = [URLQueryItem(name: "key", value: geminiApiKey)]
        
        var urlComponents = URLComponents(string: endpoint)
        urlComponents?.queryItems = queryItems
        
        guard let url = urlComponents?.url else {
            return Fail(error: FoodRecognitionError.networkError("–ù–µ–≤–µ—Ä–Ω—ã–π URL")).eraseToAnyPublisher()
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64
        guard let imageData = image.jpegData(compressionQuality: 0.8) else {
            return Fail(error: FoodRecognitionError.imageProcessingError("–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")).eraseToAnyPublisher()
        }
        
        // –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
        let resizedImage = resizeImageIfNeeded(image, maxWidth: 768, maxHeight: 768)
        guard let resizedImageData = resizedImage.jpegData(compressionQuality: 0.8) else {
            return Fail(error: FoodRecognitionError.imageProcessingError("–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")).eraseToAnyPublisher()
        }
        
        let base64Image = resizedImageData.base64EncodedString()
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.addValue("application/json", forHTTPHeaderField: "Content-Type")
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å API Gemini
        let requestBody: [String: Any] = [
            "contents": [
                [
                    "parts": [
                        ["text": "Identify the food dish shown in this image. Give only a simple general name of the dish in English, without explanations. For example: 'Beef Pilaf', 'Pasta Carbonara', 'Chicken Caesar Salad'."],
                        [
                            "inline_data": [
                                "mime_type": "image/jpeg",
                                "data": base64Image
                            ]
                        ]
                    ]
                ]
            ],
            "generationConfig": [
                "temperature": 0.2,
                "topK": 32,
                "topP": 0.95,
                "maxOutputTokens": 100,
            ]
        ]
        
        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: requestBody)
        } catch {
            return Fail(error: FoodRecognitionError.networkError("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: \(error.localizedDescription)")).eraseToAnyPublisher()
        }
        
        print("üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini Vision API:")
        print("   URL: \(url)")
        
        return session.dataTaskPublisher(for: request)
            .tryMap { (data, response) -> Data in
                guard let httpResponse = response as? HTTPURLResponse else {
                    throw FoodRecognitionError.networkError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –æ—Ç–≤–µ—Ç")
                }
                
                guard 200...299 ~= httpResponse.statusCode else {
                    if let errorResponseString = String(data: data, encoding: .utf8) {
                        print("–û—à–∏–±–∫–∞ Gemini API: \(errorResponseString)")
                    }
                    throw FoodRecognitionError.networkError("–û—à–∏–±–∫–∞ HTTP: \(httpResponse.statusCode)")
                }
                
                return data
            }
            .decode(type: GeminiResponse.self, decoder: JSONDecoder())
            .tryMap { (response: GeminiResponse) -> String in
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini
                guard let candidate = response.candidates?.first,
                      let content = candidate.content,
                      let part = content.parts?.first,
                      let text = part.text else {
                    throw FoodRecognitionError.invalidResponse
                }
                
                // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∫–∞–≤—ã—á–µ–∫ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
                let cleanedText = text
                    .trimmingCharacters(in: .whitespacesAndNewlines)
                    .replacingOccurrences(of: "\"", with: "")
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –µ–¥—ã –≤ –æ—Ç–≤–µ—Ç–µ
                let noFoodPhrases = ["no food", "can't identify", "no dish", "unable to determine", "not a food"]
                for phrase in noFoodPhrases {
                    if cleanedText.lowercased().contains(phrase.lowercased()) {
                        throw FoodRecognitionError.recognitionFailed("No food detected in the image")
                    }
                }
                
                return cleanedText
            }
            .mapError { error -> FoodRecognitionError in
                if let recognitionError = error as? FoodRecognitionError {
                    return recognitionError
                }
                return .recognitionFailed("–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: \(error.localizedDescription)")
            }
            .eraseToAnyPublisher()
    }
    
    // MARK: - Step 2: GPT-4 Decomposition
    
    /// –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –±–ª—é–¥–∞ –Ω–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å –ø–æ–º–æ—â—å—é GPT-4
    private func decomposeWithGPT4(dishName: String, image: UIImage? = nil) -> AnyPublisher<[String], FoodRecognitionError> {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å OpenAI —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ Gemini
        print("üçΩÔ∏è –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –±–ª—é–¥–∞: \(dishName) (—á–µ—Ä–µ–∑ OpenAI/Gemini)")
        return openAIService.decomposeWithFallback(foodName: dishName)
            .mapError { error -> FoodRecognitionError in
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –±–ª—é–¥–∞: \(error.localizedDescription)")
                return .decompositionFailed("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –±–ª—é–¥–∞: \(error.localizedDescription)")
            }
            .eraseToAnyPublisher()
    }
    
    // MARK: - Step 3: Edamam Nutrition Data
    
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é Edamam API
    private func getNutritionDataFromEdamam(dishName: String, ingredients: [String], image: UIImage?) -> AnyPublisher<[RecognizedFoodV2], FoodRecognitionError> {
        print("üåê Sending requests to Edamam API for nutrient analysis")
        
        // Create publishers for each ingredient
        let requests = ingredients.map { ingredient -> AnyPublisher<RecognizedFoodV2, Error> in
            return self.getNutritionDataForSingleIngredient(ingredient)
                .map { nutritionData -> RecognizedFoodV2 in
                    // Verify we got valid nutrition data
                    if nutritionData.calories <= 0 && nutritionData.protein <= 0 && nutritionData.carbs <= 0 && nutritionData.fat <= 0 {
                        print("‚ö†Ô∏è Warning: Received zero values for all nutrients for \(ingredient), using fallback values")
                        // Create fallback nutrition data with reasonable values
                        let fallbackNutrition = NutritionDataV2(
                            calories: 100,
                            protein: 5,
                            fat: 5,
                            carbs: 15,
                            sugar: 2,
                            fiber: 1,
                            sodium: 10,
                            source: "edamam_fallback",
                            foodLabel: ingredient,
                            cholesterol: 0,
                            servingSize: 100,
                            servingUnit: "g"
                        )
                        
                        return RecognizedFoodV2(
                            name: ingredient,
                            confidence: 1.0,
                            nutritionData: fallbackNutrition,
                            originalImage: image
                        )
                    }
                    
                    return RecognizedFoodV2(
                        name: ingredient,
                        confidence: 1.0,
                        nutritionData: nutritionData,
                        originalImage: image
                    )
                }
                .catch { error -> AnyPublisher<RecognizedFoodV2, Error> in
                    // Create fallback values on error with a distinct source
                    print("‚ö†Ô∏è Error getting nutrition data for \(ingredient): \(error)")
                    let defaultNutrition = NutritionDataV2(
                        calories: 100,
                        protein: 5,
                        fat: 5,
                        carbs: 15,
                        sugar: 2,
                        fiber: 1,
                        sodium: 10,
                        source: "edamam_error_fallback",
                        foodLabel: ingredient,
                        cholesterol: 0,
                        servingSize: 100,
                        servingUnit: "g"
                    )
                    
                    let foodWithDefaultValues = RecognizedFoodV2(
                        name: ingredient,
                        confidence: 1.0,
                        nutritionData: defaultNutrition,
                        originalImage: image
                    )
                    
                    return Just(foodWithDefaultValues).setFailureType(to: Error.self).eraseToAnyPublisher()
                }
                .eraseToAnyPublisher()
        }
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –æ–¥–∏–Ω –∏–∑–¥–∞—Ç–µ–ª—å
        return Publishers.MergeMany(requests)
            .collect()
            .map { recognizedFoods -> [RecognizedFoodV2] in
                // Calculate combined dish nutritional data
                let totalCalories = recognizedFoods.reduce(0) { $0 + ($1.nutritionData?.calories ?? 0) }
                let totalProtein = recognizedFoods.reduce(0) { $0 + ($1.nutritionData?.protein ?? 0) }
                let totalFat = recognizedFoods.reduce(0) { $0 + ($1.nutritionData?.fat ?? 0) }
                let totalCarbs = recognizedFoods.reduce(0) { $0 + ($1.nutritionData?.carbs ?? 0) }
                let totalSugar = recognizedFoods.reduce(0) { $0 + ($1.nutritionData?.sugar ?? 0) }
                let totalFiber = recognizedFoods.reduce(0) { $0 + ($1.nutritionData?.fiber ?? 0) }
                let totalSodium = recognizedFoods.reduce(0) { $0 + ($1.nutritionData?.sodium ?? 0) }
                let totalCholesterol = recognizedFoods.reduce(0) { $0 + ($1.nutritionData?.cholesterol ?? 0) }
                
                // Create combined nutrition data
                let combinedNutritionData = NutritionDataV2(
                    calories: totalCalories,
                    protein: totalProtein,
                    fat: totalFat,
                    carbs: totalCarbs,
                    sugar: totalSugar,
                    fiber: totalFiber,
                    sodium: totalSodium,
                    source: "edamam_combined",
                    foodLabel: dishName,
                    cholesterol: totalCholesterol,
                    servingSize: 100.0,
                    servingUnit: "g"
                )
                
                // Create combined dish with ingredients
                let combinedFood = RecognizedFoodV2(
                    name: dishName,
                    confidence: 1.0,
                    nutritionData: combinedNutritionData,
                    originalImage: image,
                    ingredients: ingredients
                )
                
                // Return only the combined dish by default
                var result = [combinedFood]
                
                // Add individual ingredients
                result.append(contentsOf: recognizedFoods)
                
                return result
            }
            .mapError { error -> FoodRecognitionError in
                return .nutritionAnalysisFailed("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤: \(error.localizedDescription)")
            }
            .eraseToAnyPublisher()
    }
    
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Edamam API
    private func getNutritionDataForSingleIngredient(_ foodName: String) -> AnyPublisher<NutritionDataV2, Error> {
        // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å API –∫–ª—é—á–∏
        guard !edamamAppId.isEmpty, !edamamAppKey.isEmpty else {
            print("‚ö†Ô∏è –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –∫–ª—é—á–∏ Edamam –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤")
            return Fail(error: FoodRecognitionError.nutritionAnalysisFailed("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –∫–ª—é—á–∏ Edamam")).eraseToAnyPublisher()
        }
        
        // Skip translation since ingredients are already in English
        let englishFoodName = foodName
        print("üçΩÔ∏è Using direct English name: \(englishFoodName)")
        
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ URL
        let urlString = "https://api.edamam.com/api/nutrition-data"
        guard var urlComponents = URLComponents(string: urlString) else {
            return Fail(error: FoodRecognitionError.networkError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π URL")).eraseToAnyPublisher()
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        urlComponents.queryItems = [
            URLQueryItem(name: "app_id", value: edamamAppId),
            URLQueryItem(name: "app_key", value: edamamAppKey),
            URLQueryItem(name: "ingr", value: "100g \(englishFoodName)")
        ]
        
        guard let url = urlComponents.url else {
            return Fail(error: FoodRecognitionError.networkError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å URL")).eraseToAnyPublisher()
        }
        
        print("üåê –ó–∞–ø—Ä–æ—Å –∫ Edamam: \(url.absoluteString)")
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        return URLSession.shared.dataTaskPublisher(for: url)
            .map { $0.data }
            .decode(type: EdamamResponse.self, decoder: JSONDecoder())
            .map { response -> NutritionDataV2 in
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–æ–¥–µ–ª—å NutritionDataV2
                return NutritionDataV2(
                    calories: response.calories,
                    protein: response.totalNutrients.PROCNT?.quantity ?? 0,
                    fat: response.totalNutrients.FAT?.quantity ?? 0,
                    carbs: response.totalNutrients.CHOCDF?.quantity ?? 0,
                    sugar: response.totalNutrients.SUGAR?.quantity,
                    fiber: response.totalNutrients.FIBTG?.quantity,
                    sodium: response.totalNutrients.NA?.quantity,
                    source: "edamam",
                    foodLabel: foodName,
                    cholesterol: response.totalNutrients.CHOLE?.quantity,
                    servingSize: 100,
                    servingUnit: "g"
                )
            }
            .catch { error -> AnyPublisher<NutritionDataV2, Error> in
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Edamam: \(error)")
                
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Å –Ω—É–ª–µ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                let fallbackData = NutritionDataV2(
                    calories: 0,
                    protein: 0,
                    fat: 0,
                    carbs: 0,
                    sugar: nil,
                    fiber: nil,
                    sodium: nil,
                    source: "edamam_fallback",
                    foodLabel: foodName,
                    cholesterol: nil,
                    servingSize: 100,
                    servingUnit: "g"
                )
                
                return Just(fallbackData)
                    .setFailureType(to: Error.self)
                    .eraseToAnyPublisher()
            }
            .eraseToAnyPublisher()
    }
    
    /// –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    private func translateFoodNameToEnglish(_ russianName: String) -> String {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–∞—è –ª–∏ —Å—Ç—Ä–æ–∫–∞
        guard !russianName.isEmpty else {
            return russianName
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à, –≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–æ–¥ —É–∂–µ –µ—Å—Ç—å
        let lowercaseRussianName = russianName.lowercased()
        if let cachedTranslation = translationCache[lowercaseRussianName] {
            print("üîÑ –ü–µ—Ä–µ–≤–æ–¥ –∏–∑ –∫—ç—à–∞: '\(russianName)' -> '\(cachedTranslation)'")
            return cachedTranslation
        }
        
        // –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è Google Translate API
        let urlString = "https://translation.googleapis.com/language/translate/v2"
        guard var urlComponents = URLComponents(string: urlString) else {
            print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π URL –¥–ª—è API –ø–µ—Ä–µ–≤–æ–¥–∞")
            return russianName
        }
        
        // –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ UserDefaults –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        let apiKey = UserDefaults.standard.string(forKey: "google_translate_api_key") ?? "AIzaSyBKaHxMvfr2PJ4T5_sJNGd9pc9PfOXaURs"
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        urlComponents.queryItems = [
            URLQueryItem(name: "key", value: apiKey),
            URLQueryItem(name: "q", value: russianName),
            URLQueryItem(name: "source", value: "ru"),
            URLQueryItem(name: "target", value: "en")
        ]
        
        guard let url = urlComponents.url else {
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
            return russianName
        }
        
        print("üåê –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥: \(russianName)")
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        
        // –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        let semaphore = DispatchSemaphore(value: 0)
        
        // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        var translatedText = russianName
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            defer { semaphore.signal() }
            
            guard let data = data, error == nil else {
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–µ—Ä–µ–≤–æ–¥–∞: \(error?.localizedDescription ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")")
                return
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å JSON
            do {
                if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                   let dataObject = json["data"] as? [String: Any],
                   let translations = dataObject["translations"] as? [[String: Any]],
                   let firstTranslation = translations.first,
                   let translation = firstTranslation["translatedText"] as? String {
                    translatedText = translation
                    print("üîÑ –ü–µ—Ä–µ–≤–æ–¥: '\(russianName)' -> '\(translation)'")
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≤ –∫—ç—à
                    self.translationCache[lowercaseRussianName] = translation
                } else {
                    print("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API –ø–µ—Ä–µ–≤–æ–¥–∞")
                }
            } catch {
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: \(error)")
            }
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
        task.resume()
        
        // –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        _ = semaphore.wait(timeout: .now() + 5)
        
        return translatedText
    }
    
    // MARK: - CoreData Integration
    
    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—É—é –µ–¥—É –≤ CoreData
    func saveFoodToCoreData(food: RecognizedFoodV2, image: UIImage?) {
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Food
        let context = CoreDataManager.shared.context
        
        // Skip translation since food is already in English
        let englishName = food.name
        print("üçΩÔ∏è Saving food with English name: \(englishName)")
        
        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Food
        let foodEntity = Food(context: context)
        foodEntity.id = UUID()
        foodEntity.name = englishName // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è –Ω–∞–ø—Ä—è–º—É—é
        foodEntity.createdAt = Date()
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        foodEntity.isFavorite = false  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        foodEntity.isIngredient = false  // –≠—Ç–æ –Ω–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if let nutrition = food.nutritionData {
            foodEntity.calories = nutrition.calories
            foodEntity.protein = nutrition.protein
            foodEntity.fat = nutrition.fat
            foodEntity.carbs = nutrition.carbs
            foodEntity.sugar = nutrition.sugar ?? 0
            foodEntity.fiber = nutrition.fiber ?? 0
            foodEntity.sodium = nutrition.sodium ?? 0
            foodEntity.cholesterol = nutrition.cholesterol ?? 0
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏
        foodEntity.servingSize = 100
        foodEntity.servingUnit = "g"
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if let originalImage = image {
            foodEntity.imageData = processImageForStorage(image: originalImage)
            print("üì∏ Image processed and attached to \(englishName)")
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞—Ö, –µ—Å–ª–∏ —ç—Ç–æ —Å–æ—Å—Ç–∞–≤–Ω–æ–µ –±–ª—é–¥–æ
        if let ingredients = food.ingredients, !ingredients.isEmpty {
            print("ü•ó Adding \(ingredients.count) ingredients to \(englishName)")
            
            for ingredientName in ingredients {
                let ingredient = Ingredient(context: context)
                ingredient.id = UUID()
                ingredient.name = ingredientName
                ingredient.createdAt = Date()
                ingredient.food = foodEntity
                
                // Set default nutritional values, all are required and cannot be nil
                ingredient.calories = 0
                ingredient.protein = 0
                ingredient.fat = 0
                ingredient.carbs = 0
                
                // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∫ 1 –ø–æ—Ä—Ü–∏—é
                ingredient.amount = 1.0
                ingredient.unit = "g"
            }
            
            // Mark as a composed food
            foodEntity.isComposed = true
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CoreData
        do {
            try context.save()
            print("‚úÖ Food '\(englishName)' successfully saved to CoreData")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π –µ–¥—ã –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            if let foodId = foodEntity.id?.uuidString {
                UserDefaults.standard.set(foodId, forKey: "lastScannedFoodID")
                
                // –¢–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ NavigationCoordinator
                NavigationCoordinator.shared.lastScannedFoodID = foodId
                NavigationCoordinator.shared.recentlyScannedFood = foodEntity
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∏—â–∏
                NotificationCenter.default.post(name: NSNotification.Name("FoodUpdated"), object: nil)
            }
        } catch {
            print("‚ùå Error saving food to CoreData: \(error)")
        }
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    func createCombinedFoodFromRecognizedFoods(name: String, foods: [RecognizedFoodV2], image: UIImage?) {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç CoreData
        let context = CoreDataManager.shared.context
        
        // Skip translation since name is already in English
        let englishName = name
        print("üçΩÔ∏è Creating combined food with English name: \(englishName)")
        
        // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ
        let combinedFood = Food(context: context)
        combinedFood.id = UUID()
        combinedFood.name = englishName // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è –Ω–∞–ø—Ä—è–º—É—é
        combinedFood.createdAt = Date()
        combinedFood.isIngredient = false // –≠—Ç–æ –Ω–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
        combinedFood.isComposed = true // Mark as composed food
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º–∞—Ä–Ω—É—é –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å
        var totalCalories: Double = 0
        var totalProtein: Double = 0
        var totalFat: Double = 0
        var totalCarbs: Double = 0
        var totalSugar: Double = 0
        var totalFiber: Double = 0
        
        // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ —Å—É–º–º–∏—Ä—É–µ–º –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å
        for food in foods {
            // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏
            if let nutrition = food.nutritionData {
                totalCalories += nutrition.calories
                totalProtein += nutrition.protein
                totalFat += nutrition.fat
                totalCarbs += nutrition.carbs
                totalSugar += nutrition.sugar ?? 0
                totalFiber += nutrition.fiber ?? 0
                
                // Skip translation since ingredient name is already in English
                let englishIngredientName = food.name
                
                // –°–æ–∑–¥–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
                let ingredient = Ingredient(context: context)
                ingredient.id = UUID()
                ingredient.name = englishIngredientName // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è –Ω–∞–ø—Ä—è–º—É—é
                ingredient.calories = nutrition.calories
                ingredient.protein = nutrition.protein
                ingredient.fat = nutrition.fat
                ingredient.carbs = nutrition.carbs
                ingredient.amount = 1.0
                ingredient.unit = "g"
                ingredient.createdAt = Date()
                ingredient.food = combinedFood
            }
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É–º–º–∞—Ä–Ω—É—é –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å
        combinedFood.calories = totalCalories
        combinedFood.protein = totalProtein
        combinedFood.fat = totalFat
        combinedFood.carbs = totalCarbs
        combinedFood.sugar = totalSugar
        combinedFood.fiber = totalFiber
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if let image = image, let imageData = image.jpegData(compressionQuality: 0.7) {
            combinedFood.imageData = imageData
        }
        
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏
        combinedFood.servingSize = 100
        combinedFood.servingUnit = "g"
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CoreData
        do {
            try context.save()
            print("‚úÖ Combined food '\(englishName)' successfully saved to CoreData")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π –µ–¥—ã –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            if let foodId = combinedFood.id?.uuidString {
                UserDefaults.standard.set(foodId, forKey: "lastScannedFoodID")
                
                // –¢–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ NavigationCoordinator
                NavigationCoordinator.shared.lastScannedFoodID = foodId
                NavigationCoordinator.shared.recentlyScannedFood = combinedFood
            }
        } catch {
            print("‚ùå Error saving combined food to CoreData: \(error)")
        }
    }
    
    // MARK: - Helper Methods
    
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
    private func processImageForStorage(image: UIImage) -> Data? {
        // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, —É–º–µ–Ω—å—à–∞–µ–º –µ–≥–æ
        let maxSize: CGFloat = 1024
        let resizedImage: UIImage
        
        if image.size.width > maxSize || image.size.height > maxSize {
            resizedImage = resizeImageIfNeeded(image, maxWidth: maxSize, maxHeight: maxSize)
        } else {
            resizedImage = image
        }
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPEG —Å —É–º–µ—Ä–µ–Ω–Ω—ã–º —Å–∂–∞—Ç–∏–µ–º
        return resizedImage.jpegData(compressionQuality: 0.7)
    }
    
    /// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    private func resizeImageIfNeeded(_ image: UIImage, maxWidth: CGFloat, maxHeight: CGFloat) -> UIImage {
        let originalSize = image.size
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä
        if originalSize.width <= maxWidth && originalSize.height <= maxHeight {
            return image
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
        let widthRatio = maxWidth / originalSize.width
        let heightRatio = maxHeight / originalSize.height
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∏–º–µ–Ω—å—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        let scaleFactor = min(widthRatio, heightRatio)
        
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä
        let newWidth = originalSize.width * scaleFactor
        let newHeight = originalSize.height * scaleFactor
        let newSize = CGSize(width: newWidth, height: newHeight)
        
        // –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        UIGraphicsBeginImageContextWithOptions(newSize, false, 1.0)
        image.draw(in: CGRect(origin: .zero, size: newSize))
        let resizedImage = UIGraphicsGetImageFromCurrentImageContext() ?? image
        UIGraphicsEndImageContext()
        
        return resizedImage
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–∞ –ø—É—Ç–µ–º –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini
    func checkApiKeyValidity() -> AnyPublisher<Bool, Error> {
        let endpoint = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"
        let queryItems = [URLQueryItem(name: "key", value: geminiApiKey)]
        
        var urlComponents = URLComponents(string: endpoint)
        urlComponents?.queryItems = queryItems
        
        guard let url = urlComponents?.url else {
            return Fail(error: FoodRecognitionError.networkError("–ù–µ–≤–µ—Ä–Ω—ã–π URL")).eraseToAnyPublisher()
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.addValue("application/json", forHTTPHeaderField: "Content-Type")
        
        // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        let requestBody: [String: Any] = [
            "contents": [
                [
                    "parts": [
                        ["text": "–ü—Ä–∏–≤–µ—Ç"]
                    ]
                ]
            ]
        ]
        
        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: requestBody)
        } catch {
            return Fail(error: FoodRecognitionError.networkError("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: \(error.localizedDescription)")).eraseToAnyPublisher()
        }
        
        return session.dataTaskPublisher(for: request)
            .tryMap { (data, response) -> Bool in
                guard let httpResponse = response as? HTTPURLResponse else {
                    throw FoodRecognitionError.networkError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –æ—Ç–≤–µ—Ç")
                }
                
                if 200...299 ~= httpResponse.statusCode {
                    return true // –ö–ª—é—á –≤–∞–ª–∏–¥–µ–Ω
                } else {
                    if let responseString = String(data: data, encoding: .utf8) {
                        print("–û—à–∏–±–∫–∞ API: \(responseString)")
                    }
                    return false // –ö–ª—é—á –Ω–µ –≤–∞–ª–∏–¥–µ–Ω
                }
            }
            .mapError { error -> Error in
                if let foodError = error as? FoodRecognitionError {
                    return foodError
                }
                return error
            }
            .eraseToAnyPublisher()
    }
    
    // MARK: - Fallback Recognition with Vision
    
    /// Fallback food recognition using Vision framework when Gemini API is unavailable
    private func detectDishWithVision(image: UIImage) -> AnyPublisher<String, FoodRecognitionError> {
        // Create a Deferred publisher to perform Vision request asynchronously
        return Deferred {
            Future<String, FoodRecognitionError> { promise in
                // Create a Vision request for classifying the image
                guard let cgImage = image.cgImage else {
                    promise(.failure(.imageProcessingError("Failed to get CGImage")))
                    return
                }
                
                // Use the built-in image classifier instead of requiring a specific model
                let request = VNClassifyImageRequest { request, error in
                    if let error = error {
                        promise(.failure(.recognitionFailed("Vision framework error: \(error.localizedDescription)")))
                        return
                    }
                    
                    // Process the results
                    guard let results = request.results as? [VNClassificationObservation],
                          !results.isEmpty else {
                        promise(.failure(.recognitionFailed("No classification results found")))
                        return
                    }
                    
                    // Extract food-related classifications
                    let foodClasses = results.prefix(10).filter { observation in
                        // Look for food-related terms
                        let identifier = observation.identifier.lowercased()
                        return identifier.contains("food") || 
                               identifier.contains("dish") || 
                               identifier.contains("meal") ||
                               identifier.contains("fruit") ||
                               identifier.contains("vegetable") ||
                               identifier.contains("meat") ||
                               identifier.contains("bread") ||
                               identifier.contains("rice") ||
                               identifier.contains("pasta") ||
                               identifier.contains("salad")
                    }
                    
                    if let bestFoodMatch = foodClasses.first {
                        print("üì± Vision identified food: \(bestFoodMatch.identifier) (confidence: \(bestFoodMatch.confidence))")
                        promise(.success(bestFoodMatch.identifier.capitalized))
                    } else if let topResult = results.first {
                        // Generic fallback
                        print("üì± Vision fallback (non-food): \(topResult.identifier) (confidence: \(topResult.confidence))")
                        // Provide a generic "Food" response
                        promise(.success("Food"))
                    } else {
                        // Ultimate fallback
                        promise(.success("Food Item"))
                    }
                }
                
                // Set the request properties
                request.revision = VNClassifyImageRequestRevision1
                
                // Create a handler and perform the request
                let handler = VNImageRequestHandler(cgImage: cgImage, options: [:])
                do {
                    try handler.perform([request])
                } catch {
                    promise(.failure(.recognitionFailed("Vision request failed: \(error.localizedDescription)")))
                }
            }
        }
        .eraseToAnyPublisher()
    }
}

// MARK: - Error Types

// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è FoodRecognitionError –∏–∑ –º–æ–¥–µ–ª–∏ FoodRecognitionError.swift 