import Foundation
import Combine
import UIKit
import CoreData

/// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å Spoonacular API –Ω–∞ Edamam API
class SpoonacularToEdamamMigration {
    
    static let shared = SpoonacularToEdamamMigration()
    
    private var cancellables = Set<AnyCancellable>()
    
    private init() {
        // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
    }
    
    /// –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –º–∏–≥—Ä–∞—Ü–∏–∏
    func migrateToEdamam(completion: @escaping (Bool, String) -> Void) {
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å Spoonacular –Ω–∞ Edamam API")
        
        // 1. –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á–∏ API –≤ UserDefaults
        updateApiKeys()
        
        // 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ CoreData –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞
        let foods = getFoodsWithSpoonacularSource()
        
        if foods.isEmpty {
            print("‚úÖ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å Spoonacular –Ω–∞ Edamam")
            completion(true, "–ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º Spoonacular.")
            return
        }
        
        print("üîÑ –ù–∞–π–¥–µ–Ω–æ \(foods.count) –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞")
        
        // 3. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Edamam
        migrateNutritionData(for: foods) { success, message in
            completion(success, message)
        }
    }
    
    /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π API –≤ UserDefaults
    private func updateApiKeys() {
        // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è/–æ—á–∏—Å—Ç–∫–∏ API –∫–ª—é—á–µ–π
        
        // –£–¥–∞–ª—è–µ–º Spoonacular API –∫–ª—é—á, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if UserDefaults.standard.object(forKey: "spoonacular_api_key") != nil {
            UserDefaults.standard.removeObject(forKey: "spoonacular_api_key")
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á–∏ Edamam —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        if UserDefaults.standard.string(forKey: "edamam_app_id") == nil {
            UserDefaults.standard.set("", forKey: "edamam_app_id")
        }
        
        if UserDefaults.standard.string(forKey: "edamam_app_key") == nil {
            UserDefaults.standard.set("", forKey: "edamam_app_key")
        }
        
        print("‚úÖ API –∫–ª—é—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ UserDefaults")
    }
    
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∏–∑ CoreData —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º Spoonacular
    private func getFoodsWithSpoonacularSource() -> [RecognizedFoodV2] {
        var foods: [RecognizedFoodV2] = []
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º CoreDataManager –≤–º–µ—Å—Ç–æ AppDelegate
        let context = CoreDataManager.shared.context
        let fetchRequest = NSFetchRequest<NSFetchRequestResult>(entityName: "FoodItem")
        fetchRequest.predicate = NSPredicate(format: "nutritionSource CONTAINS[cd] %@", "spoonacular")
        
        do {
            let result = try context.fetch(fetchRequest) as! [NSManagedObject]
            
            for data in result {
                if let name = data.value(forKey: "name") as? String,
                   let calories = data.value(forKey: "calories") as? Double,
                   let protein = data.value(forKey: "protein") as? Double,
                   let fat = data.value(forKey: "fat") as? Double,
                   let carbs = data.value(forKey: "carbs") as? Double {
                    
                    let sugar = data.value(forKey: "sugar") as? Double
                    let fiber = data.value(forKey: "fiber") as? Double
                    let sodium = data.value(forKey: "sodium") as? Double
                    let cholesterol = data.value(forKey: "cholesterol") as? Double
                    let id = data.value(forKey: "id") as? UUID
                    
                    let nutritionData = NutritionDataV2(
                        calories: calories,
                        protein: protein,
                        fat: fat,
                        carbs: carbs,
                        sugar: sugar,
                        fiber: fiber,
                        sodium: sodium,
                        source: "spoonacular",
                        foodLabel: name,
                        cholesterol: cholesterol,
                        servingSize: 100.0,
                        servingUnit: "g"
                    )
                    
                    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º UUID
                    let foodId: UUID
                    if let safeId = id {
                        foodId = safeId
                    } else {
                        foodId = UUID()
                    }
                    
                    let food = RecognizedFoodV2(
                        id: foodId,
                        name: name,
                        confidence: 1.0,
                        nutritionData: nutritionData,
                        originalImage: nil,
                        ingredients: nil
                    )
                    
                    foods.append(food)
                }
            }
        } catch {
            print("üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: \(error)")
            return []
        }
        
        return foods
    }
    
    /// –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Edamam API
    private func migrateNutritionData(for foods: [RecognizedFoodV2], completion: @escaping (Bool, String) -> Void) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π Edamam
        let edamamAppId = UserDefaults.standard.string(forKey: "edamam_app_id") ?? ""
        let edamamAppKey = UserDefaults.standard.string(forKey: "edamam_app_key") ?? ""
        
        guard !edamamAppId.isEmpty, !edamamAppKey.isEmpty else {
            print("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏ Edamam API")
            completion(false, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏ Edamam API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
            return
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if foods.isEmpty {
            completion(true, "–ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        }
        
        // –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—á–µ—Ç—á–∏–∫—É
        let counterQueue = DispatchQueue(label: "com.cleem.migrationCounter")
        var migratedCount = 0
        let totalCount = foods.count
        
        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á
        for food in foods {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ name –Ω–∞–ø—Ä—è–º—É—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –Ω–µ–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ
            let foodName = food.name
            
            // –ï—Å–ª–∏ –∏–º—è –ø—É—Å—Ç–æ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if foodName.isEmpty {
                continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Å –ø—É—Å—Ç—ã–º –∏–º–µ–Ω–µ–º
            }
            
            // food.id —ç—Ç–æ –Ω–µ–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π UUID, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            let foodId: UUID = food.id
            
            requestNutritionData(foodName: foodName, id: foodId, edamamAppId: edamamAppId, edamamAppKey: edamamAppKey) { 
                // –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                counterQueue.sync {
                    migratedCount += 1
                    print("üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ \(migratedCount) –∏–∑ \(totalCount) –∑–∞–ø–∏—Å–µ–π")
                    
                    // –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                    if migratedCount == totalCount {
                        DispatchQueue.main.async {
                            completion(true, "–ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ \(migratedCount) –∑–∞–ø–∏—Å–µ–π.")
                        }
                    }
                }
            }
        }
    }
    
    /// –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏–∑ Edamam API –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ CoreData
    private func requestNutritionData(foodName: String, id: UUID, edamamAppId: String, edamamAppKey: String, completion: @escaping () -> Void) {
        // –ü–µ—Ä–µ–≤–æ–¥ —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        let translatedName = translateFoodNameToEnglish(foodName)
        
        let urlString = "https://api.edamam.com/api/nutrition-data"
        guard var urlComponents = URLComponents(string: urlString) else {
            print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Edamam API")
            completion()
            return
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        urlComponents.queryItems = [
            URLQueryItem(name: "app_id", value: edamamAppId),
            URLQueryItem(name: "app_key", value: edamamAppKey),
            URLQueryItem(name: "ingr", value: "100g \(translatedName)")
        ]
        
        guard let url = urlComponents.url else {
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
            completion()
            return
        }
        
        print("üåê –ó–∞–ø—Ä–æ—Å –∫ Edamam: \(url.absoluteString)")
        
        URLSession.shared.dataTask(with: url) { [weak self] data, response, error in
            defer { completion() }
            
            guard let self = self, let data = data, error == nil else {
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Edamam API: \(error?.localizedDescription ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")")
                return
            }
            
            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            do {
                let response = try JSONDecoder().decode(EdamamNutritionResponse.self, from: data)
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã
                let calories = response.totalNutrients.ENERC_KCAL?.quantity ?? 0
                let protein = response.totalNutrients.PROCNT?.quantity ?? 0
                let fat = response.totalNutrients.FAT?.quantity ?? 0
                let carbs = response.totalNutrients.CHOCDF?.quantity ?? 0
                let sugar = response.totalNutrients.SUGAR?.quantity
                let fiber = response.totalNutrients.FIBTG?.quantity
                let sodium = response.totalNutrients.NA?.quantity
                let cholesterol = response.totalNutrients.CHOLE?.quantity
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CoreData
                DispatchQueue.main.async {
                    self.updateFoodInCoreData(
                        id: id,
                        calories: calories,
                        protein: protein, 
                        fat: fat, 
                        carbs: carbs, 
                        sugar: sugar, 
                        fiber: fiber, 
                        sodium: sodium, 
                        cholesterol: cholesterol
                    )
                    
                    print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è \(foodName)")
                }
            } catch {
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Edamam API: \(error)")
            }
        }.resume()
    }
    
    /// –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    private func translateFoodNameToEnglish(_ russianName: String) -> String {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–∞—è –ª–∏ —Å—Ç—Ä–æ–∫–∞
        guard !russianName.isEmpty else {
            return russianName
        }
        
        // –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è Google Translate API
        let urlString = "https://translation.googleapis.com/language/translate/v2"
        guard var urlComponents = URLComponents(string: urlString) else {
            print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π URL –¥–ª—è API –ø–µ—Ä–µ–≤–æ–¥–∞")
            return russianName
        }
        
        // –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ UserDefaults –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        let apiKey = UserDefaults.standard.string(forKey: "google_translate_api_key") ?? "AIzaSyBKaHxMvfr2PJ4T5_sJNGd9pc9PfOXaURs"
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        urlComponents.queryItems = [
            URLQueryItem(name: "key", value: apiKey),
            URLQueryItem(name: "q", value: russianName),
            URLQueryItem(name: "source", value: "ru"),
            URLQueryItem(name: "target", value: "en")
        ]
        
        guard let url = urlComponents.url else {
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
            return russianName
        }
        
        print("üåê –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥: \(russianName)")
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        
        // –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        let semaphore = DispatchSemaphore(value: 0)
        
        // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        var translatedText = russianName
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            defer { semaphore.signal() }
            
            guard let data = data, error == nil else {
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–µ—Ä–µ–≤–æ–¥–∞: \(error?.localizedDescription ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")")
                return
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å JSON
            do {
                if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                   let dataObject = json["data"] as? [String: Any],
                   let translations = dataObject["translations"] as? [[String: Any]],
                   let firstTranslation = translations.first,
                   let translation = firstTranslation["translatedText"] as? String {
                    translatedText = translation
                    print("üîÑ –ü–µ—Ä–µ–≤–æ–¥: '\(russianName)' -> '\(translation)'")
                } else {
                    print("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API –ø–µ—Ä–µ–≤–æ–¥–∞")
                }
            } catch {
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: \(error)")
            }
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
        task.resume()
        
        // –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        _ = semaphore.wait(timeout: .now() + 5)
        
        return translatedText
    }
    
    /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ CoreData
    private func updateFoodInCoreData(id: UUID, calories: Double, protein: Double, fat: Double, carbs: Double, sugar: Double?,
        fiber: Double?, sodium: Double?, cholesterol: Double?) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º CoreDataManager –≤–º–µ—Å—Ç–æ AppDelegate
        let context = CoreDataManager.shared.context
        let fetchRequest = NSFetchRequest<NSFetchRequestResult>(entityName: "FoodItem")
        fetchRequest.predicate = NSPredicate(format: "id == %@", id as CVarArg)
        
        do {
            if let result = try context.fetch(fetchRequest) as? [NSManagedObject], let foodItem = result.first {
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞
                foodItem.setValue(calories, forKey: "calories")
                foodItem.setValue(protein, forKey: "protein")
                foodItem.setValue(fat, forKey: "fat")
                foodItem.setValue(carbs, forKey: "carbs")
                
                if let sugar = sugar {
                    foodItem.setValue(sugar, forKey: "sugar")
                }
                
                if let fiber = fiber {
                    foodItem.setValue(fiber, forKey: "fiber")
                }
                
                if let sodium = sodium {
                    foodItem.setValue(sodium, forKey: "sodium")
                }
                
                if let cholesterol = cholesterol {
                    foodItem.setValue(cholesterol, forKey: "cholesterol")
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
                foodItem.setValue("edamam", forKey: "nutritionSource")
                
                try context.save()
            }
        } catch {
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ CoreData: \(error)")
        }
    }
    
    // MARK: - –ú–æ–¥–µ–ª–∏ –¥–ª—è Edamam API

    struct EdamamNutritionResponse: Decodable {
        let totalNutrients: TotalNutrients
    }

    struct TotalNutrients: Decodable {
        let ENERC_KCAL: Nutrient?
        let PROCNT: Nutrient?
        let FAT: Nutrient?
        let CHOCDF: Nutrient?
        let SUGAR: Nutrient?
        let FIBTG: Nutrient?
        let NA: Nutrient?
        let CHOLE: Nutrient?
    }

    struct Nutrient: Decodable {
        let quantity: Double
        let unit: String
    }
} 