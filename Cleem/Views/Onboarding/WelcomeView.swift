import SwiftUI
import CoreHaptics

struct WelcomeView: View {
    var onContinue: () -> Void
    @State private var animateItems = false
    @State private var showLanguageSelection = false
    @State private var selectedLanguage: UserProfile.Language = .english
    @EnvironmentObject var navigationCoordinator: NavigationCoordinator
    @State private var hapticEngine: CHHapticEngine?
    @State private var rotationAngle: Double = 0
    
    var body: some View {
        ZStack {
            // Background - light blue
            Color(red: 0.91, green: 0.97, blue: 1.0)
                .edgesIgnoringSafeArea(.all)
            
            // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            VStack {
                // Language button in top right corner
                HStack {
                    Spacer()
                    Button(action: {
                        showLanguageSelection = true
                        // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
                        generateFeedback()
                    }) {
                        Text(selectedLanguage.code)
                            .font(.system(size: 16, weight: .semibold))
                            .foregroundColor(.white)
                            .frame(width: 40, height: 40)
                            .background(Color.black)
                            .clipShape(Circle())
                    }
                    .padding(.trailing, 20)
                    .padding(.top, 20)
                    .opacity(animateItems ? 1.0 : 0)
                    .offset(y: animateItems ? 0 : -10)
                    .animation(.easeOut(duration: 0.5).delay(0.2), value: animateItems)
                }
                
                Spacer()
                
                // Welcome image in center (—É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä)
                ZStack {
                    // –ë–µ–ª—ã–π –∫—Ä—É–≥ –ø–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                    Circle()
                        .fill(Color.white)
                        .frame(width: UIScreen.main.bounds.width * 0.7, height: UIScreen.main.bounds.width * 0.7)
                    
                    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    Image("Welcome")
                        .resizable()
                        .aspectRatio(contentMode: .fill)
                        .frame(width: UIScreen.main.bounds.width * 0.75, height: UIScreen.main.bounds.width * 0.75)
                        .clipShape(Circle())
                        .offset(x: 8, y: 2)
                        .rotationEffect(Angle(degrees: rotationAngle))
                        .onAppear {
                            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è
                            withAnimation(.linear(duration: 45).repeatForever(autoreverses: false)) {
                                rotationAngle = 360
                            }
                        }
                }
                .padding(.vertical, 15)
                .opacity(animateItems ? 1 : 0)
                .offset(y: animateItems ? 0 : 20)
                .animation(.easeOut(duration: 0.5).delay(0.3), value: animateItems)
                
                Spacer()
                
                // Text section moved down, above the Get Started button
                VStack(spacing: 10) {
                    // Main title
                    Text("Welcome to Cleem!")
                        .font(.system(size: 36, weight: .bold))
                        .foregroundColor(.black)
                        .multilineTextAlignment(.center)
                    
                    // Subtitle
                    Text("Health is above all")
                        .font(.system(size: 24, weight: .medium))
                        .foregroundColor(.black)
                        .multilineTextAlignment(.center)
                        .padding(.top, 5)
                }
                .opacity(animateItems ? 1 : 0)
                .offset(y: animateItems ? 0 : 20)
                .animation(.easeOut(duration: 0.5).delay(0.4), value: animateItems)
                .padding(.bottom, 40)
                
                // Get Started button (—É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)
                Button(action: {
                    // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
                    generateFeedback()
                    onContinue()
                }) {
                    Text("Get Started")
                        .font(.system(size: 20, weight: .semibold))
                        .foregroundColor(.black)
                        .frame(maxWidth: .infinity)
                        .frame(height: 60)
                        .background(Color.white)
                        .cornerRadius(30)
                }
                .padding(.horizontal, 40)
                .padding(.bottom, 60)
                .opacity(animateItems ? 1 : 0)
                .offset(y: animateItems ? 0 : 30)
                .animation(.easeOut(duration: 0.5).delay(0.6), value: animateItems)
                .zIndex(1) // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π z-index –¥–ª—è –∫–Ω–æ–ø–∫–∏
            }
            .allowsHitTesting(!showLanguageSelection) // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–æ–º —è–∑—ã–∫–æ–≤–æ–º –º–µ–Ω—é
            
            // Language selection overlay
            if showLanguageSelection {
                // Dark overlay for the background
                Color.black.opacity(0.4)
                    .edgesIgnoringSafeArea(.all)
                    .onTapGesture {
                        showLanguageSelection = false
                    }
                    .zIndex(2)
                
                VStack {
                    Spacer().frame(height: UIScreen.main.bounds.height * 0.15) // Increased height slightly to move it down
                    
                    LanguageSelectionOverlay(
                        selectedLanguage: $selectedLanguage,
                        isPresented: $showLanguageSelection
                    )
                    
                    Spacer()
                }
                .zIndex(3) // Higher z-index than the overlay
            }
        }
        .onAppear {
            // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ haptic feedback
            prepareHaptics()
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                animateItems = true
            }
            
            // Load saved language if available
            if let savedLanguage = navigationCoordinator.userProfile.preferredLanguage {
                selectedLanguage = savedLanguage
            }
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ haptic feedback
    private func prepareHaptics() {
        guard CHHapticEngine.capabilitiesForHardware().supportsHaptics else { return }
        
        do {
            hapticEngine = try CHHapticEngine()
            try hapticEngine?.start()
        } catch {
            print("Haptic engine error: \(error.localizedDescription)")
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–∫—Ç–∏–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–≤–∏–±—Ä–∞—Ü–∏–∏)
    private func generateFeedback() {
        let generator = UIImpactFeedbackGenerator(style: .medium)
        generator.impactOccurred()
    }
}

struct LanguageSelectionOverlay: View {
    @Binding var selectedLanguage: UserProfile.Language
    @Binding var isPresented: Bool
    @EnvironmentObject var navigationCoordinator: NavigationCoordinator
    
    // Language options
    private let languages: [(language: UserProfile.Language, name: String, flag: String)] = [
        (.russian, "–†—É—Å—Å–∫–∏–π", "üá∑üá∫"),
        (.english, "English", "üá∫üá∏"),
        (.spanish, "Espa√±ol", "üá™üá∏"),
        (.french, "Fran√ßais", "üá´üá∑"),
        (.chinese, "‰∏≠Êñá", "üá®üá≥"),
        (.german, "Deutsch", "üá©üá™")
    ]
    
    var body: some View {
        // –ë–µ–ª–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å —è–∑—ã–∫–∞–º–∏ (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
        VStack(spacing: 12) {
            ForEach(languages, id: \.language) { option in
                Button(action: {
                    selectedLanguage = option.language
                    navigationCoordinator.userProfile.preferredLanguage = option.language
                    
                    // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞
                    let impact = UIImpactFeedbackGenerator(style: .light)
                    impact.impactOccurred()
                    
                    isPresented = false
                }) {
                    HStack {
                        Spacer()
                        
                        // –ù–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –∏ —Ñ–ª–∞–≥ –ø–æ —Ü–µ–Ω—Ç—Ä—É, —Ä—è–¥–æ–º –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º
                        HStack(spacing: 10) {
                            Text(option.name)
                                .font(.system(size: 20, weight: .medium))
                                .foregroundColor(.black)
                            
                            Text(option.flag)
                                .font(.system(size: 24))
                        }
                        
                        Spacer()
                    }
                    .padding(.vertical, 16)
                    .frame(maxWidth: .infinity)
                    .background(Color(red: 0.93, green: 0.93, blue: 0.93))
                    .cornerRadius(16)
                }
            }
        }
        .padding(20)
        .background(Color.white)
        .cornerRadius(24)
        .padding(.horizontal, 24)
        .frame(maxWidth: .infinity)
    }
}

struct WelcomeView_Previews: PreviewProvider {
    static var previews: some View {
        WelcomeView(onContinue: {})
            .environmentObject(NavigationCoordinator.shared)
    }
} 