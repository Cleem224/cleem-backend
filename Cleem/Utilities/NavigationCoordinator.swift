import Foundation
import SwiftUI
import Combine
import UIKit
import CoreData

class NavigationCoordinator: ObservableObject {
    static let shared = NavigationCoordinator()
    
    // MARK: - Notification Names
    static let didCompleteFoodAnalysis = Notification.Name("didCompleteFoodAnalysis")
    static let navigateToHomeScreen = Notification.Name("navigateToHomeScreen")
    
    @Published var activeScreen: Screen? = nil {
        willSet {
            // When screen changes, set the isTransitioning flag
            if newValue != activeScreen {
                isTransitioning = true
                
                // Add a small delay before changing screens to allow for animations
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.25) {
                    self.isTransitioning = false
                }
            }
        }
    }
    
    // Add a flag to track transitions
    @Published var isTransitioning: Bool = false
    
    @Published var foodAnalysisImage: UIImage?
    @Published var foodDetailItem: FoodItem?
    @Published var foodNutrition: FoodNutrition?
    @Published var isShowingNoResultsFound = false
    @Published var userProfile = UserProfile()
    @Published var isOnboarding = false
    
    // Food analysis state
    @Published var isAnalyzing = false
    @Published var scanSuccess = false
    
    // Food scanning results tracking properties
    @Published var lastScannedFoodID: String? {
        didSet {
            if let id = lastScannedFoodID {
                print("NavigationCoordinator: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º lastScannedFoodID = \(id)")
                UserDefaults.standard.set(id, forKey: "lastScannedFoodID")
                UserDefaults.standard.synchronize()
            }
        }
    }
    @Published var recentlyScannedFood: Food? {
        didSet {
            if let newFood = recentlyScannedFood, oldValue?.id != newFood.id {
                print("NavigationCoordinator: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω recentlyScannedFood, id: \(newFood.id?.uuidString ?? "nil"), name: \(newFood.name ?? "Unknown")")
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
                if let foodId = newFood.id {
                    lastScannedFoodID = foodId.uuidString
                    print("NavigationCoordinator: –°–æ—Ö—Ä–∞–Ω–µ–Ω lastScannedFoodID = \(foodId.uuidString)")
                    
                    // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ UserDefaults –Ω–∞–ø—Ä—è–º—É—é
                    CoreDataManager.shared.saveFoodToUserDefaults(food: newFood)
                }
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –µ–¥—ã
                NotificationCenter.default.post(name: NSNotification.Name("FoodUpdated"), object: nil)
            }
        }
    }
    @Published var isFoodScanning = false
    @Published var isFoodAnalyzing = false
    @Published var notFoodDetected = false
    
    // Navigation flags
    @Published var showScanCamera = false {
        didSet {
            if showScanCamera {
                // –ö–æ–≥–¥–∞ –∫–∞–º–µ—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–Ω—ã –ª–∏ –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
                shouldUseNewScanCameraView = UserDefaults.standard.bool(forKey: "use_new_recognition")
                print("üîÑ –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞–º–µ—Ä—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, —Ä–µ–∂–∏–º shouldUseNewScanCameraView: \(shouldUseNewScanCameraView)")
            }
        }
    }
    @Published var shouldUseNewScanCameraView = false
    @Published var showBarcodeScannerView = false
    @Published var showFoodLabelView = false
    @Published var showImagePicker = false
    
    // Manual food entry
    @Published var isShowingFoodSearch = false
    @Published var currentMealType = ""
    
    // Training monitor
    @Published var showTrainingMonitorView = false
    
    // Food database selection callback
    private var foodSelectionCallback: ((Any) -> Void)?
    
    private var cancellables = Set<AnyCancellable>()
    
    private init() {
        setupNotificationListeners()
        initUserProfile()
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è shouldUseNewScanCameraView –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        shouldUseNewScanCameraView = UserDefaults.standard.bool(forKey: "use_new_recognition")
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NavigationCoordinator, —Ä–µ–∂–∏–º shouldUseNewScanCameraView: \(shouldUseNewScanCameraView)")
    }
    
    // Method to change screens with proper transition
    func navigateTo(_ screen: Screen?) {
        // Only proceed if not already transitioning
        guard !isTransitioning else { return }
        
        withAnimation(.easeOut(duration: 0.3)) {
            self.activeScreen = screen
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    func shouldUseNewRecognitionSystem() -> Bool {
        return UserDefaults.standard.bool(forKey: "use_new_recognition")
    }
    
    private func setupNotificationListeners() {
        // Add notification observers
        NotificationCenter.default.publisher(for: NavigationCoordinator.didCompleteFoodAnalysis)
            .sink { [weak self] notification in
                guard let self = self else { return }
                
                if let foodItem = notification.object as? FoodItem {
                    self.foodDetailItem = foodItem
                    self.navigateTo(.foodDetails(foodItem: foodItem))
                    self.isAnalyzing = false
                    self.scanSuccess = true
                }
            }
            .store(in: &cancellables)
        
        NotificationCenter.default.publisher(for: NavigationCoordinator.navigateToHomeScreen)
            .sink { [weak self] _ in
                self?.navigateTo(nil)
            }
            .store(in: &cancellables)
        
        // Register for app termination notification to save the context
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(saveContextOnTerminate),
            name: UIApplication.willTerminateNotification,
            object: nil
        )
        
        // Register for app entering background notification
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(saveContextOnBackground),
            name: UIApplication.didEnterBackgroundNotification,
            object: nil
        )
        
        // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        UserDefaults.standard.publisher(for: \.use_new_recognition)
            .sink { [weak self] newValue in
                self?.shouldUseNewScanCameraView = newValue
            }
            .store(in: &cancellables)
    }
    
    @objc func saveContextOnTerminate() {
        print("NavigationCoordinator: Saving context on app termination")
        // Save last scanned food ID to UserDefaults
        if let food = recentlyScannedFood, let id = food.id?.uuidString {
            UserDefaults.standard.set(id, forKey: "lastScannedFoodID")
            UserDefaults.standard.synchronize()
        }
        
        // Save context
        CoreDataManager.shared.saveContext()
    }
    
    @objc func saveContextOnBackground() {
        print("NavigationCoordinator: Saving context when app enters background")
        // Save last scanned food ID to UserDefaults
        if let food = recentlyScannedFood, let id = food.id?.uuidString {
            UserDefaults.standard.set(id, forKey: "lastScannedFoodID")
            UserDefaults.standard.synchronize()
        }
        
        // Save context
        CoreDataManager.shared.saveContext()
    }
    
    private func initUserProfile() {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API –∫–ª—é—á–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        FoodRecognitionManagerV2().setDefaultApiKeys()
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –µ–¥—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        loadLastScannedFood()
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        if let savedProfileData = UserDefaults.standard.data(forKey: "userProfile"),
           let savedProfile = try? JSONDecoder().decode(UserProfile.self, from: savedProfileData) {
            userProfile = savedProfile
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ BMI, –Ω–æ –Ω–µ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏
            userProfile.bmi = userProfile.calculateBMI()
            // –ù–µ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            // userProfile.dailyCalories = userProfile.calculateDailyCalories()
        } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            userProfile = UserProfile()
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –µ–¥—ã –∏–∑ CoreData –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    private func loadLastScannedFood() {
        if let lastFoodID = UserDefaults.standard.string(forKey: "lastScannedFoodID"),
           let uuid = UUID(uuidString: lastFoodID) {
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç CoreData
            let context = CoreDataManager.shared.context
            let fetchRequest: NSFetchRequest<Food> = Food.fetchRequest()
            
            // –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID
            fetchRequest.predicate = NSPredicate(format: "id == %@", uuid as CVarArg)
            
            do {
                let results = try context.fetch(fetchRequest)
                if let lastFood = results.first {
                    print("–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –µ–¥–∞: \(lastFood.name ?? "Unknown"), ID: \(lastFood.id?.uuidString ?? "nil")")
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–¥—É –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ didSet)
                    self.recentlyScannedFood = lastFood
                } else {
                    print("–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –µ–¥–∞ —Å ID \(lastFoodID) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    
                    // –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç
                    loadMostRecentFood()
                }
            } catch {
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –µ–¥—ã: \(error)")
                
                // –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç
                loadMostRecentFood()
            }
        } else {
            print("ID –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –µ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ UserDefaults")
            
            // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ ID, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç
            loadMostRecentFood()
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∞–º–æ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    private func loadMostRecentFood() {
        let context = CoreDataManager.shared.context
        let fetchRequest: NSFetchRequest<Food> = Food.fetchRequest()
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (—Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)
        fetchRequest.sortDescriptors = [NSSortDescriptor(key: "createdAt", ascending: false)]
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 1 –∑–∞–ø–∏—Å–∏ (—Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç)
        fetchRequest.fetchLimit = 1
        
        do {
            let results = try context.fetch(fetchRequest)
            if let lastFood = results.first {
                print("–ó–∞–≥—Ä—É–∂–µ–Ω —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç: \(lastFood.name ?? "Unknown"), ID: \(lastFood.id?.uuidString ?? "nil")")
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–¥—É
                self.recentlyScannedFood = lastFood
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ UserDefaults
                if let foodId = lastFood.id?.uuidString {
                    UserDefaults.standard.set(foodId, forKey: "lastScannedFoodID")
                    UserDefaults.standard.synchronize()
                }
            } else {
                print("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
            }
        } catch {
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∞–º–æ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞: \(error)")
        }
    }
    
    func showNutritionDetails(for food: FoodItem, nutrition: FoodNutrition) {
        self.foodDetailItem = food
        self.foodNutrition = nutrition
        self.navigateTo(.nutritionDetails(foodItem: food))
    }
    
    func dismissActiveScreen() {
        // Capture current screen for logging
        let currentScreen = self.activeScreen
        print("Dismissing screen: \(String(describing: currentScreen?.id))")
        
        // –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ–∫—É—â–∏–º —ç–∫—Ä–∞–Ω–æ–º
        self.foodDetailItem = nil
        self.foodNutrition = nil
        
        // –ó–∞—Ç–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º activeScreen –≤ nil —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        withAnimation(.easeInOut(duration: 0.2)) {
            self.activeScreen = nil
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        NotificationCenter.default.post(name: NavigationCoordinator.navigateToHomeScreen, object: nil)
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –¥–∞—Ç—å UI –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–∫—Ä–∞–Ω –∑–∞–∫—Ä—ã–ª—Å—è
            if self.activeScreen != nil {
                print("Screen didn't close properly. Forcing dismiss.")
                withAnimation(.easeInOut(duration: 0.1)) {
                    self.activeScreen = nil
                }
                
                // Force screen dismissal through UIKit if needed
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.05) {
                    if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
                       let rootViewController = windowScene.windows.first?.rootViewController {
                        if let presentedVC = rootViewController.presentedViewController {
                            presentedVC.dismiss(animated: true)
                        }
                    }
                }
            }
        }
    }
    
    // –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    func showProfileSetup() {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ —Å –Ω—É–ª—è
        startOnboarding()
    }
    
    // Add this method to handle manual food entry
    func showManualFoodEntry(for mealType: String) {
        // Implementation to show food search page for manual entry
        // This will be called from QuickActionsView
        self.currentMealType = mealType
        self.isShowingFoodSearch = true
    }
    
    // Method to show food database with a callback for ingredient selection
    func showFoodDatabase(onFoodSelected: @escaping (Any) -> Void) {
        self.foodSelectionCallback = onFoodSelected
        navigateTo(.foodDatabase)
    }
    
    // Method to handle food selection from the database
    func selectFoodFromDatabase(_ food: Any) {
        if let callback = foodSelectionCallback {
            callback(food)
            foodSelectionCallback = nil
            navigateTo(nil) // Return to previous screen
        }
    }
    
    // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    func completeProfileSetup() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è
        userProfile.updateProfile()
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ —Å –ø–ª–∞–≤–Ω—ã–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º
        withAnimation(.easeInOut(duration: 0.3)) {
            self.isOnboarding = false
            self.navigateTo(nil)
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    func startOnboarding() {
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ—Ç–æ–≤
        DispatchQueue.main.async {
            // –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
            self.isOnboarding = true
            
            // –ó–∞—Ç–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å –º–∞–ª–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.05) {
                self.navigateTo(.welcome)
            }
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    func dismissProfileSetup() {
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        withAnimation(.easeOut(duration: 0.3)) {
            isOnboarding = false
            navigateTo(nil)
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —ç–∫—Ä–∞–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∏—Ç–∞–Ω–∏—è
    func showNutritionParameterEditView(parameterType: NutritionParameterType, value: Binding<Int>) {
        // –°–æ–∑–¥–∞–µ–º —ç–∫—Ä–∞–Ω —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø–∏—Ç–∞–Ω–∏—è —á–µ—Ä–µ–∑ —Ä–æ–¥–Ω–æ–π NavigationView
        let editView = NavigationView {
            NutritionParameterEditView(
                parameterType: parameterType,
                value: value
            )
            .environmentObject(self)
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º UIKit –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è SwiftUI view –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
           let rootViewController = windowScene.windows.first?.rootViewController {
            
            let hostingController = UIHostingController(rootView: editView)
            hostingController.modalPresentationStyle = .fullScreen
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
            rootViewController.present(hostingController, animated: true)
        }
    }
    
    // Show training monitor sheet
    func showTrainingMonitor() {
        withAnimation {
            self.showTrainingMonitorView = true
        }
    }
    
    // Add method to show combined food details
    func showCombinedFoodDetails(for combinedFood: CombinedFoodItem) {
        self.navigateTo(.combinedFoodDetails(combinedFood: combinedFood))
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–∏—â–∏
    func showFoodDetail(for food: FoodDisplayable) {
        print("NavigationCoordinator: showFoodDetail –≤—ã–∑–≤–∞–Ω")
        if let food = food as? Food {
            activeScreen = .foodDetail(food)
        } else {
            print("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø FoodDisplayable")
        }
    }
    
    // Show the detailed view for food with ingredients
    func showFoodIngredientDetail(for food: Food) {
        print("NavigationCoordinator: showFoodIngredientDetail called")
        if food.isComposed && (food.ingredients?.count ?? 0) > 0 {
            // Use dedicated ingredient detail view for composed foods
            activeScreen = .foodIngredientDetail(food)
        } else {
            // Fallback to regular food detail for non-composed foods
            activeScreen = .foodDetail(food)
        }
    }
}

extension NavigationCoordinator {
    enum Screen: Identifiable, Equatable {
        case foodDetails(foodItem: FoodItem)
        case nutritionDetails(foodItem: FoodItem)
        case combinedFoodDetails(combinedFood: CombinedFoodItem)
        case profileSetup
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω—ã –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
        case welcome
        case genderSelection
        case ageSelection
        // case heightSelection  // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã
        // case weightSelection  // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã
        case heightWeightSelection  // –î–æ–±–∞–≤–∏–ª–∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
        case goalSelection
        case targetWeight
        case activitySelection
        case dietSelection
        case appreciation // –≠–∫—Ä–∞–Ω –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
        case planBuild // –ù–æ–≤—ã–π —ç–∫—Ä–∞–Ω —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä—É–∫ –¥–µ—Ä–∂–∞—â–∏—Ö —Å–µ—Ä–¥—Ü–µ
        case recommendationLoading // –≠–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        case summary
        case foodDatabase
        case foodDetail(Food)
        case foodIngredientDetail(Food)
        
        var id: String {
            switch self {
            case .foodDetails(let foodItem):
                return "foodDetails-\(foodItem.id)"
            case .nutritionDetails(let foodItem):
                return "nutritionDetails-\(foodItem.id)"
            case .combinedFoodDetails(let combinedFood):
                return "combinedFoodDetails-\(combinedFood.id.uuidString)"
            case .profileSetup:
                return "profileSetup"
            case .welcome:
                return "welcome"
            case .genderSelection:
                return "genderSelection"
            case .ageSelection:
                return "ageSelection"
            // case .heightSelection:
            //     return "heightSelection"
            // case .weightSelection:
            //     return "weightSelection"
            case .heightWeightSelection:
                return "heightWeightSelection"
            case .goalSelection:
                return "goalSelection"
            case .targetWeight:
                return "targetWeight"
            case .activitySelection:
                return "activitySelection"
            case .dietSelection:
                return "dietSelection"
            case .appreciation:
                return "appreciation"
            case .planBuild:
                return "planBuild"
            case .recommendationLoading:
                return "recommendationLoading"
            case .summary:
                return "summary"
            case .foodDatabase:
                return "foodDatabase"
            case .foodDetail(let food):
                return "foodDetail-\(food.id?.uuidString ?? "nil")"
            case .foodIngredientDetail(let food):
                return "foodIngredientDetail-\(food.id?.uuidString ?? "nil")"
            }
        }
        
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ Equatable
        static func == (lhs: Screen, rhs: Screen) -> Bool {
            return lhs.id == rhs.id
        }
    }
}

// MARK: - UserDefaults Extension

extension UserDefaults {
    @objc var use_new_recognition: Bool {
        return bool(forKey: "use_new_recognition")
    }
}





