import Foundation
import Combine
import UIKit
import CoreData

class FoodDatabaseService: ObservableObject {
    static let shared = FoodDatabaseService()
    
    @Published var recommendations: [RecommendedFoodItem] = []
    @Published var searchResults: [RecommendedFoodItem] = []
    @Published var isLoading: Bool = false
    @Published var errorMessage: String? = nil
    
    // API –∫–ª—é—á–∏ –¥–ª—è Edamam
    private let edamamAppId: String
    private let edamamAppKey: String
    
    // –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è Edamam Food Database API
    private let baseURL = "https://api.edamam.com/api/food-database/v2"
    
    // URL —Å–µ—Å—Å–∏—è
    private let session: URLSession
    private var cancellables = Set<AnyCancellable>()
    
    private init() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ API
        let defaultFoodDbId = "b8fc1835"
        let defaultFoodDbKey = "3e85e1b27b125c78a76a6605d6d526f0"
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á–∏ –≤ UserDefaults, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
        if UserDefaults.standard.string(forKey: "edamam_food_db_id") == nil {
            UserDefaults.standard.set(defaultFoodDbId, forKey: "edamam_food_db_id")
        }
        if UserDefaults.standard.string(forKey: "edamam_food_db_key") == nil {
            UserDefaults.standard.set(defaultFoodDbKey, forKey: "edamam_food_db_key")
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –∏–∑ UserDefaults
        let appId = UserDefaults.standard.string(forKey: "edamam_food_db_id") ?? defaultFoodDbId
        let appKey = UserDefaults.standard.string(forKey: "edamam_food_db_key") ?? defaultFoodDbKey
        self.edamamAppId = appId
        self.edamamAppKey = appKey
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print("üîë FoodDatabaseService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∫–ª—é—á–∞–º–∏:")
        print("   Food DB App ID: \(appId)")
        print("   Food DB App Key: \(appKey.prefix(10))...")
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –æ–∂–∏–¥–∞–Ω–∏—è
        let config = URLSessionConfiguration.default
        config.timeoutIntervalForRequest = 30
        self.session = URLSession(configuration: config)
        
        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã
        setupAfterInit()
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    private func setupAfterInit() {
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        #if DEBUG
        CoreDataLogger.setup()
        #endif
        
        // Register for app termination notification to save the context
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(saveContextOnTerminate),
            name: UIApplication.willTerminateNotification,
            object: nil
        )
        
        // Register for app entering background notification
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(saveContextOnBackground),
            name: UIApplication.didEnterBackgroundNotification,
            object: nil
        )
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º weak self
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) { [weak self] in
            self?.verifyDataModel()
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        loadRecommendations()
    }
    
    // MARK: - –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã API
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    func loadRecommendations() {
        isLoading = true
        errorMessage = nil
        
        // –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        let popularFoods = ["apple", "banana", "chicken", "egg", "yogurt", "salmon", "rice", "avocado", "spinach", "oatmeal"]
        
        // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        let group = DispatchGroup()
        var tempRecommendations: [RecommendedFoodItem] = []
        
        // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        for food in popularFoods {
            group.enter()
            
            fetchFoodInfo(query: food) { [weak self] result in
                defer { group.leave() }
                
                switch result {
                case .success(let items):
                    if let item = items.first {
                        tempRecommendations.append(item)
                    }
                case .failure(let error):
                    print("Error fetching recommendation for \(food): \(error)")
                }
            }
        }
        
        // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        group.notify(queue: .main) { [weak self] in
            guard let self = self else { return }
            
            if tempRecommendations.isEmpty {
                // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å—ã –Ω–µ —É–¥–∞–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
                self.recommendations = RecommendedFoodItem.sampleRecommendations
                self.errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ API. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ."
            } else {
                self.recommendations = tempRecommendations
            }
            
            self.isLoading = false
        }
    }
    
    // –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
    func searchFoods(query: String) {
        guard !query.isEmpty else {
            searchResults = []
            return
        }
        
        isLoading = true
        errorMessage = nil
        
        fetchFoodInfo(query: query) { [weak self] result in
            guard let self = self else { return }
            
            DispatchQueue.main.async {
                switch result {
                case .success(let items):
                    self.searchResults = items
                case .failure(let error):
                    print("Error searching foods: \(error)")
                    self.errorMessage = "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: \(error.localizedDescription)"
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                    self.searchResults = RecommendedFoodItem.sampleRecommendations.filter {
                        $0.name.lowercased().contains(query.lowercased())
                    }
                }
                
                self.isLoading = false
            }
        }
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ Recent Logged
    func addFoodToRecentlyLogged(food: RecommendedFoodItem) {
        print("\n===== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–†–û–î–£–ö–¢–ê –í RECENTLY LOGGED =====")
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ FoodItem
        let foodItem = food.toFoodItem()
        let nutrition = food.toFoodNutrition()
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–¥—É–∫—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        let context = CoreDataManager.shared.context
        let fetchRequest: NSFetchRequest<Food> = Food.fetchRequest()
        fetchRequest.predicate = NSPredicate(format: "name == %@", foodItem.name)
        
        do {
            let existingFoods = try context.fetch(fetchRequest)
            
            if let existingFood = existingFoods.first {
                print("‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç —Å –∏–º–µ–Ω–µ–º '\(foodItem.name)' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å.")
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
                existingFood.calories = nutrition.calories
                existingFood.protein = nutrition.protein
                existingFood.carbs = nutrition.carbs
                existingFood.fat = nutrition.fat
                existingFood.servingSize = Double(nutrition.servingSize)
                existingFood.servingUnit = nutrition.servingUnit
                existingFood.createdAt = Date() // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                existingFood.isIngredient = false
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                if let image = food.image {
                    existingFood.imageData = image.jpegData(compressionQuality: 0.8)
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                try context.save()
                print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–¥—É–∫—Ç \(foodItem.name) –≤ CoreData")
                
                // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≤–∏–¥–∏–º–æ—Å—Ç—å –≤ Recently Logged
                CoreDataManager.shared.saveFoodItem(food: existingFood)
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
                NavigationCoordinator.shared.recentlyScannedFood = existingFood
                
                print("===== –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–û–î–£–ö–¢–ê –ó–ê–í–ï–†–®–ï–ù–û =====\n")
                return
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: \(error)")
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç CoreData, –µ—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        let newFood = Food(context: context)
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        newFood.id = UUID(uuidString: foodItem.id) ?? UUID()
        newFood.name = foodItem.name
        newFood.calories = nutrition.calories
        newFood.protein = nutrition.protein
        newFood.carbs = nutrition.carbs
        newFood.fat = nutrition.fat
        newFood.servingSize = Double(nutrition.servingSize)
        newFood.servingUnit = nutrition.servingUnit
        newFood.createdAt = Date()
        
        // –í–∞–∂–Ω–æ: —è–≤–Ω–æ –æ—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
        newFood.isIngredient = false
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if let image = food.image {
            newFood.imageData = image.jpegData(compressionQuality: 0.8)
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CoreData —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ CoreDataManager
        do {
            try context.save()
            print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç \(food.name) –≤ CoreData")
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º CoreDataManager –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ UserDefaults
            CoreDataManager.shared.saveFoodItem(food: newFood)
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
            NavigationCoordinator.shared.recentlyScannedFood = newFood
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ CoreData: \(error)")
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –≤–∏–±—Ä–∞—Ü–∏—é –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
        #if os(iOS)
        let generator = UINotificationFeedbackGenerator()
        generator.notificationOccurred(.success)
        #endif
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Recently Logged
        NotificationCenter.default.post(name: NSNotification.Name("FoodUpdated"), object: nil)
        
        print("===== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–†–û–î–£–ö–¢–ê –ó–ê–í–ï–†–®–ï–ù–û =====\n")
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ UserDefaults
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é - –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CoreDataManager.saveFoodItem
    private func saveFoodToUserDefaults(_ food: Food) {
        guard let id = food.id?.uuidString, let name = food.name else { return }
        
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        CoreDataManager.shared.saveFoodItem(food: food)
    }
    
    // MARK: - –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ –∏–∑ Edamam API
    private func fetchFoodInfo(query: String, completion: @escaping (Result<[RecommendedFoodItem], Error>) -> Void) {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        let endpoint = "/parser"
        let queryItems = [
            URLQueryItem(name: "app_id", value: edamamAppId),
            URLQueryItem(name: "app_key", value: edamamAppKey),
            URLQueryItem(name: "ingr", value: query),
            URLQueryItem(name: "nutrition-type", value: "logging")
        ]
        
        var urlComponents = URLComponents(string: baseURL + endpoint)
        urlComponents?.queryItems = queryItems
        
        guard let url = urlComponents?.url else {
            completion(.failure(NSError(domain: "FoodDatabaseService", code: 100, userInfo: [NSLocalizedDescriptionKey: "–ù–µ–≤–µ—Ä–Ω—ã–π URL"])))
            return
        }
        
        print("üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Edamam Food Database API:")
        print("   URL: \(url)")
        print("   App ID: \(edamamAppId)")
        print("   Query: \(query)")
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å - –∏—Å–ø–æ–ª—å–∑—É–µ–º URLSession.shared –≤–º–µ—Å—Ç–æ self.session
        URLSession.shared.dataTaskPublisher(for: url)
            .map(\.data)
            .decode(type: FoodDatabaseResponse.self, decoder: JSONDecoder())
            .sink(receiveCompletion: { [weak self] completionStatus in
                if case .failure(let error) = completionStatus {
                    print("‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: \(error.localizedDescription)")
                    completion(.failure(error))
                }
            }, receiveValue: { [weak self] response in
                guard let self = self else { return }
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –Ω–∞—à–∏ –º–æ–¥–µ–ª–∏
                let foodItems = self.convertFoodDatabaseResponseToFoodItems(response)
                print("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å \(foodItems.count) –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏")
                completion(.success(foodItems))
            })
            .store(in: &cancellables)
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ API –≤ –Ω–∞—à–∏ –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
    private func convertFoodDatabaseResponseToFoodItems(_ response: FoodDatabaseResponse) -> [RecommendedFoodItem] {
        return response.hints.compactMap { hint -> RecommendedFoodItem? in
            guard let food = hint.food,
                  let nutrients = food.nutrients,
                  let calories = nutrients.ENERC_KCAL else {
                return nil
            }
            
            // –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏
            let protein = nutrients.PROCNT ?? 0
            let carbs = nutrients.CHOCDF ?? 0
            let fat = nutrients.FAT ?? 0
            let sugars = nutrients.SUGAR ?? 0
            let fiber = nutrients.FIBTG ?? 0
            let sodium = nutrients.NA ?? 0
            
            return RecommendedFoodItem(
                id: UUID(),
                name: food.label,
                calories: Int(calories),
                servingSize: 100, // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏
                servingUnit: "–≥",
                image: nil,
                category: food.category ?? "–û–±—â–µ–µ",
                protein: protein,
                carbs: carbs,
                fat: fat,
                sugars: sugars,
                fiber: fiber,
                sodium: sodium
            )
        }
    }
    
    // MARK: - Lifecycle Methods
    
    @objc func saveContextOnTerminate() {
        print("FoodDatabaseService: Saving context on app termination")
        CoreDataManager.shared.saveContext()
    }
    
    @objc func saveContextOnBackground() {
        print("FoodDatabaseService: Saving context when app enters background")
        CoreDataManager.shared.saveContext()
    }
    
    func verifyDataModel() {
        print("FoodDatabaseService: Verifying data model integrity")
        
        // Check for any data model inconsistencies
        let context = CoreDataManager.shared.context
        let fetchRequest: NSFetchRequest<Food> = Food.fetchRequest()
        
        do {
            let foods = try context.fetch(fetchRequest)
            print("Data model verification: Found \(foods.count) food items in database")
            
            // Check for any corrupted entries and fix them
            var needsSave = false
            for food in foods {
                // Fix any nil names
                if food.name == nil {
                    food.name = "Unknown Food"
                    needsSave = true
                }
                
                // Ensure creation date exists
                if food.createdAt == nil {
                    food.createdAt = Date()
                    needsSave = true
                }
                
                // Ensure servingUnit exists
                if food.servingUnit == nil {
                    food.servingUnit = "–≥"
                    needsSave = true
                }
            }
            
            if needsSave {
                print("Data model verification: Fixed corrupted entries")
                try context.save()
            }
        } catch {
            print("Data model verification error: \(error)")
        }
    }
}

// MARK: - API Response Models

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ Edamam Food Database API
struct FoodDatabaseResponse: Codable {
    let hints: [FoodDatabaseHint]
    let parsed: [FoodDatabaseParsed]?
}

struct FoodDatabaseHint: Codable {
    let food: FoodDatabaseFood?
}

struct FoodDatabaseParsed: Codable {
    let food: FoodDatabaseFood?
}

struct FoodDatabaseFood: Codable {
    let foodId: String?
    let label: String
    let category: String?
    let nutrients: FoodDatabaseNutrients?
}

struct FoodDatabaseNutrients: Codable {
    let ENERC_KCAL: Double? // –ö–∞–ª–æ—Ä–∏–∏
    let PROCNT: Double?     // –ë–µ–ª–∫–∏
    let FAT: Double?        // –ñ–∏—Ä—ã
    let CHOCDF: Double?     // –£–≥–ª–µ–≤–æ–¥—ã
    let FIBTG: Double?      // –ö–ª–µ—Ç—á–∞—Ç–∫–∞
    let SUGAR: Double?      // –°–∞—Ö–∞—Ä
    let NA: Double?         // –ù–∞—Ç—Ä–∏–π
}

